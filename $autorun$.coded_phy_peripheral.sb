#include "peripheral.setup.sblib"

// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
sub AssertRC(rc, tag)
    if (rc != 0) then
		if (debsw==1) then : print "ERROR_";integer.h'rc;"_TAG_";tag;"\n" : endif
    endif
endsub

// Function that will create a custom VSP service with Tx/Rx characteristics
//==============================================================================
sub ServiceInit()
    dim mdCccd,mdVal,s$,svcID,UUIDStr$
    s$ = "\00" //Default value for characteristics  
    //Create the VSP service
	//BaseUUID = BleHandleUuid16(BASEUUID)
	UUIDStr$=BASEUUID
	BaseUUID = BleHandleUuid128(UUIDStr$)
    rc = BleServiceNew(1, BaseUUID, svcID)
    //Create the RX characteristic
    mdVal = BleAttrMetadata(0,1,nAttributeLength,1,rc)
    temp$ = RXUUID
    //temp = BleHandleUuidSibling(BaseUUID, temp)
    rc = BleCharNew(8, BleHandleUuid128(temp$), mdVal, 0, 0)
	//temp=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	//temp$="RX data"
	//rc=BleCharDescUserDesc(temp$,temp)
    rc = BleCharCommit(svcID, s$, RXchar)
    //Create the TX characteristic
    mdVal = BleAttrMetadata(0,0,nAttributeLength,1,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc)
    temp$ = TXUUID
    //temp = BleHandleUuidSibling(BaseUUID, temp)
    rc = BleCharNew(16, BleHandleUuid128(temp$), mdVal, mdCccd, 0)
	//temp=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	//temp$="TX data"
	//rc=BleCharDescUserDesc(temp$,temp)
    rc = BleCharCommit(svcID, s$, TXchar)
    rc = BleServiceCommit(svcID)
endsub

// Function that will create advertising messages/sets
//==============================================================================
sub AdvertInit(flag)
	dim scRpt$,adRpt$//,ad1Rpt$
	rc=BleGapSvcInit(DevName$,0,BleAppearance,MinConnInterval,MaxConnInterval,4000000,0) : AssertRC(rc,1)
	rc=BleAdvRptInit(adRpt$, 6, AddAppearanceToAdv, DevNameLength) : AssertRC(rc,2)
	rc=BleScanRptInit(scRpt$)
	
	if BLE_PHY==BLE_CODED_PHY then
		//temp$=strdehexize$(LESupFutr$)
		//rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType1,temp$) : AssertRC(rc,3)
		temp$=strdehexize$(tag$)+Company$
		rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,temp$) : AssertRC(rc,4)
		temp$=strdehexize$(http$)+URI$
		rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,temp$) : AssertRC(rc,5)
		select flag
			case 1 //create
				rc=BleAdvSetCreate(0,9,1,0,Addr$,"") : AssertRC(rc,6)
				rc=BleAdvSetNewData(0,adRpt$,scRpt$) : AssertRC(rc,7)
			case 2 //update
				rc=BleAdvSetNewData(0,adRpt$,scRpt$) : AssertRC(rc,8)
			case else
		endselect
	else : rc=BleAdvRptsCommit(adRpt$,scRpt$) : AssertRC(rc,9)
	endif
	//print "space-"; BleAdvRptGetSpace(adRpt$)
	//print "space-"; BleExtAdvRptGetSpace(adRpt$)	
endsub

// Start LE Adverts
//==============================================================================
function BleStartAdverts()
	if BLE_PHY==BLE_CODED_PHY then : rc=BleAdvSetStart(0,AdvInterval,0,0,0)
	else : rc=BleAdvertStart(ADV_TYPE, Addr$, AdvInterval, 0, 0)
	endif
endfunc rc

// Stop LE Adverts
//==============================================================================
function BleStopAdverts()
	if BLE_PHY==BLE_CODED_PHY then : rc=BleAdvSetStop(0)
	else : rc=BleAdvertStop()
	endif
endfunc rc

// Send data throught BLE
//==============================================================================
function SendToBle(from,bdata$)
	dim sendsw,blesend$
	select from
		case 1
			if strlen(BleData$)==0 then
				BleData$=bdata$
				bdata$=""
				sendsw=1
			else : sendsw=0
			endif
		case 2
			if strlen(BleData$)!=0 then : sendsw=1
			else 
				if strlen(bdata$)!=0 then
					BleData$=bdata$
					bdata$=""
					from=3
					sendsw=1
				else : sendsw=0
				endif
			endif
		case else
	endselect
	if sendsw==1 then
		blesend$=Left$(BleData$, nAttributeLength)
		rc = BLECHARVALUENOTIFY(TXchar, blesend$)
		select rc
			case 0
				temp=strlen(blesend$)
				StrShiftLeft(BleData$,temp)
				if (debsw==1) then : print "SUCCS_SEND_N";from;"\n" : endif
			// case 24643
				// if (debsw==1) then : print "Data to send is empty\n" : endif
				// exitfunc 0
				break
			case else
				if (debsw==1) then : print "SEND_ERROR_";integer.h'rc;" msg-";blesend$;"\n" : endif
				break
		endselect
	endif
endfunc 1

// Print string to uart & ble
//------------------------------------------------------------------------------
sub PrintAny(str$)
	if (debsw==1)||(printflag==1) then
		print str$
		if ConnectionID!=0 then : rc=SendToBle(1,str$) : endif
		printflag=0
	endif
endsub

// Transmit mode parser
//==============================================================================
function ModeCheck(buf$,cnt)
	dim sendmode$
	if (cnt<11) then //+2 symbols for cr/lf
		if (cnt<7) then
			if (StrPos(buf$,DataModeStr$,0)!=-1) then 
				if ConnectionID!=0 then
					Mode=DataMode
					UartData$=""
					sendmode$="DATAMODE\n"
				else 
					UartData$=""
					sendmode$="NO_CONN\n"
				endif
				PrintAny(sendmode$)
				exitfunc 1
			endif
		else
			if (StrPos(buf$,CmndModeStr$,0)!=-1) then 
				Mode=CmndMode
				UartData$=""
				sendmode$="CMNDMODE\n"
				PrintAny(sendmode$)
				exitfunc 1
			endif
		endif
	endif
endfunc 0

// Uarts switch
//==============================================================================
sub UartSw(sw)
	select sw
		case 0
			//if UartInfo(0)==1 then 
				UartFlush(1)
				UartFlush(2)
				UartData$=""
				UartClose()
				break
			//endif
		case 1
			UartData$=""
			if UartInfo(0)==0 then : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H") : endif
			break
		case else
	endselect
endsub

// Commands parser
//==============================================================================
sub CmndParsing(num,udata$)
	dim sendcmnd$
	if num==-1 then 
		rc=ExtractStrToken(udata$,temp$)
		for temp=0 to NumCmnds-1
			if (StrCmp(temp$,CmndsTable$[temp])==0) then : CmdNum=temp : break
			else : CmdNum=-1
			endif
		next
	else : CmdNum=num
	endif
	select CmdNum
		case modemready
			printflag=1
			sendcmnd$="\r\nSUCCS"
			if BLE_PHY==BLE_CODED_PHY then : sendcmnd$=sendcmnd$+"1"
			else : sendcmnd$=sendcmnd$+"0"
			endif
			if Mode==DataMode then : sendcmnd$=sendcmnd$+"1"
			else : sendcmnd$=sendcmnd$+"0"
			endif
			if ConnectionID!=0 then : sendcmnd$=sendcmnd$+"1"
			else : sendcmnd$=sendcmnd$+"0"
			endif
			sendcmnd$=sendcmnd$+"\r\n"
			break
		case nameset
			rc=ExtractStrToken(udata$,temp$)
			DevName$=temp$
			rc=BleStopAdverts()
			AdvertInit(2)
			rc=BleStartAdverts()
			sendcmnd$="NAME_SUCCS\n"
			break
		case uartset
			rc=ExtractIntToken(udata$,temp)
			UartSw(0)
			rc = UartOpen(temp,U_BUF,U_BUF,"CN81H")
			if rc==0 then : sendcmnd$="U_SUCCS\n" : endif
			break
		case physet
			rc=ExtractIntToken(udata$,temp)
			dim HIGH_BANDWIDTH
			select temp
				case 1
					BLE_PHY=BLE_1M_PHY
					HIGH_BANDWIDTH=0
				case 4
					BLE_PHY=BLE_CODED_PHY
					HIGH_BANDWIDTH=1
				case else
					sendcmnd$="UNKNW_PARAM\n"
			endselect
			temp = BleStopAdverts()
			temp = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HIGH_BANDWIDTH)
			temp = BleAdvertConfig(4,BLE_PHY)
			temp = BleAdvertConfig(5,BLE_PHY)
			AdvertInit(1)
			//temp = BleConnectConfig(11,BLE_PHY)
			rc=BleStartAdverts()
			//temp = BlePhySet(ConnectionID, BLE_PHY, BLE_PHY, 0)
			if temp==0 then : sendcmnd$="PHY_SUCCS\n" : endif
			break
		case power
			rc=ExtractIntToken(udata$,BLE_TX_POWER)
			rc = BleTxPowerSet(BLE_TX_POWER)
			if rc==0 then : sendcmnd$="PWR_SUCCS\n" : endif
			break
		case drop
			rc = BleDisconnect(ConnectionID)
			if rc==0 then : sendcmnd$="DISC_SUCCS\n" : endif
			break
		case debug
			debsw=!debsw
			sendcmnd$="DEB_SW\n"
			break
		case resetfw
			reset(0)
		case else
			sendcmnd$="UNKNW_CMND_"+temp$+"\n"
	endselect
	PrintAny(sendcmnd$)
endsub

// Parsing device answers
//==============================================================================
function DeviceStateParsing()
	dim uhex$,id$
	uhex$=strhexize$(UartData$)
	select checkstate
		case 0
			temp=StrPos(uhex$,DeviceTypeCmnd$,0)
			if (temp!=-1) then
				StrShiftLeft(uhex$,temp+24)
				for temp=0 to NumDev-1
					if (StrPos(uhex$,DeviceTypeTable$[temp],0)!=-1) then
						DevName$=DeviceNameTable$[temp]
						checkstate=1
						exitfunc 1
					endif
				next
			endif
		case 1
			temp=StrPos(uhex$,DeviceIdCmnd$,0)
			if (temp!=-1) then
				StrShiftLeft(uhex$,temp+24)
				temp$=Left$(uhex$,4)
				id$=strsplitleft$(temp$,2)
				id$=temp$+id$
				temp=strhex2bin(id$,0)+strhex2bin(id$,2)
				sprint #id$,temp
				do : id$="0"+id$
				until strlen(id$)==4
				UartData$="nameset "+DevName$+"_"+id$
				checkstate=2
			endif
		case else
	endselect
endfunc 0

// EVUARTRX - Function handler for UART data receive
//==============================================================================
function HndlrUartRx()
	TimerStart(1,2,0)
endfunc 1

// Buffered uart handler
//==============================================================================
function HndlrBufferedUart()
	TimerStart(0,160000,0)
	rc = UARTREADN(UartData$,U_BUF)
	if rc > 0 then
		if (ModeCheck(UartData$,rc)!=0) then : UartData$="" : exitfunc 1
		else
			select Mode
				case DataMode
					if rc<13 then
						if (StrPos(UartData$,CmndsTable$[0],0)!=-1) then : CmndParsing(modemready,UartData$) : endif
					else : rc=SendToBle(1,UartData$)
					endif
					break
				case CmndMode
					rc=DeviceStateParsing()
					if rc==0 then : CmndParsing(-1,UartData$) : endif
					UartData$=""
					break
				case else
			endselect
		endif
	endif
endfunc 1

// EVNOTIFYBUF - Notification buffer was emptied
//==============================================================================
function HndlrNtfyBuf()
	rc=SendToBle(2,UartData$)
endfunc 1

// EVCHARVALUE - Handler for characteristic value written
//==============================================================================
function HndlrCharValue(nConnHandle, charHandle, offset, len, BYVAL Rd$ AS STRING)
    if charHandle == RXchar then
		TimerStart(0,160000,0)
		if (ModeCheck(Rd$,len)!=0) then : exitfunc 1
		else
			select Mode
				case DataMode
					print Rd$
				case CmndMode
					CmndParsing(-1,Rd$)
				case else
			endselect
		endif
    endif
endfunc 1

// Handler for cccd value written
//==============================================================================
function HndlrCharCccd(charHandle, nVal)
    if charHandle == TXchar then
		if (debsw==1) then : print "CCCD_FLAG_";nVal;"\n" : endif
        if (nVal&0x0001) == 0x0001 then   //if notify enabled
            TimerStart(0,160000,0)
			print "CONNECTED"
        else
            TimerStart(0,5000,0)
        endif
    endif
endfunc 1

// Device off state machine
//==============================================================================
function DevOff()
	select offstate
		case 0 //close connection
			if ConnectionID!=0 then : rc = BleDisconnect(ConnectionID) : endif
			offstate=1
			TimerStart(0,5000,0)
			break
		case 1 //turn off device
			temp$="0D0A01020088000002004378050003e0"
			print strdehexize$(temp$)
			offstate=2
			TimerStart(0,5000,0)
			break
		case 2 //close uart for lp mode 3uA
			offstate=0
			UartSw(0)
		case else
	endselect
endfunc 1

// Device check state machine
//==============================================================================
function DevCheck()
	select checkstate
		case 0
			if resetcnt==10 then : reset(0) : endif
			print strdehexize$(DeviceTypeCmnd$) //device type
			resetcnt=resetcnt+1
			TimerStart(2,650,0)
			break
		case 1
			print strdehexize$(DeviceIdCmnd$) //device id
			TimerStart(2,650,0)
			break
		case else
	endselect
endfunc 1

// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print "PHY Changed-Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n" : endif
endfunc 1

// This shows the current connection parameters
//------------------------------------------------------------------------------
sub ShowConnParms()
    dim intrvl,sprvto,slat
    rc = BleGetCurConnParms(ConnectionID,intrvl,sprvto,slat)
    print "ConnParms-Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
endsub

// Function to handle Ble event messages
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)
	dim sendmsg$
    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
		UartSw(1)
        ConnectionID = nCtx
        if (debsw==1) then : ShowConnParms() : endif
		TimerStart(0,10000,0)
		Mode=DataMode
		offstate=0
		break
    case BLE_EVBLEMSGID_DISCONNECT
        if (debsw==1) then : print "DISCONNECTED\n" : endif
        rc = BleStartAdverts()
		ConnectionID = 0
		offstate=0
		Mode=CmndMode
		TimerCancel(2)
		if CmdNum!=drop then : TimerStart(0,5000,0) : CmdNum=0 : endif
		break
    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        if (debsw==1) then : ShowConnParms() : endif
    case else
		if (debsw==1) then : print "BLEMSG:";nMsgId;"/";nCtx;"\n" : endif
    endselect
endfunc 1

// Enable the High Bandwidth configuration in order to achieve the long range
//==============================================================================
function EnableHighBandwidth()
	rc = NvCfgKeyGet(USE_STRINT_IN_EVENTS_KEY_ID, temp) // Get High bandwidth value
	if  (temp != USE_STRING_IN_EVENTS) then
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
		rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
		Reset(0)
    endif
    rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, temp) // Get High bandwidth value
    if  (temp != BLE_ENABLE_HIGH_BANDWIDTH) then
        // Change the bandwidth configuration to HIGH (6 packets per interval)
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, BLE_ENABLE_HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten  
		Reset(0)		
    endif
endfunc 0

// Disconnection handler
//------------------------------------------------------------------------------
function DisconHandler(BYVAL hConn AS INTEGER, BYVAL nRsn AS INTEGER) AS INTEGER
	if (debsw==1) then : print "DISC:";hConn;"/";nRsn;"\n" : endif
endfunc 1

// Initialization
//******************************************************************************
sub Init()
	rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	rc = BleTxPowerSet(BLE_TX_POWER)
	rc = EnableHighBandwidth()
	ServiceInit()
	AdvertInit(1)
	rc = BleAdvertConfig(4,BLE_PHY) : AssertRC(rc,22)
	rc = BleAdvertConfig(5,BLE_PHY) : AssertRC(rc,23)
	rc = BleStartAdverts() : AssertRC(rc,24)
	//temp$ = SYSINFO$(4)
	//print "Device / Address "; strhexize$(temp$);"\n" : endif
	TimerStart(0,160000,0)
	TimerStart(2,650,0)
endsub
Init()

// UART events
OnEvent EVUARTRX			call HndlrUartRx
// Generic BLE events
OnEvent EVDISCON			call DisconHandler
OnEvent EVBLEMSG			call HndlrBleMsg
OnEvent EVCHARVALUE			call HndlrCharValue         // Used if AT+CFG 213=1
OnEvent EVNOTIFYBUF			call HndlrNtfyBuf
OnEvent EVCHARCCCD			call HndlrCharCccd
// BLE PHY
OnEvent EVBLE_PHY_UPDATED	call HandlerPhyChngd
// Timers
OnEvent EVTMR0 				call DevOff
OnEvent EVTMR1 				call HndlrBufferedUart
OnEvent EVTMR2				call DevCheck
// Wait for a synchronous event
WAITEVENT
reset(0)
