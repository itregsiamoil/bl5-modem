//#include "modem.setup.sblib"

//Commands
#define Help				0
#define ScanDev				1
#define StopScanDev			2
#define ConnToDev			3
#define ScanSvcChar			4
#define ScanDesc			5
#define SetupSendSvc		6
#define SendToDev			7
#define DisConn				8
#define DebudSwitch			9
#define SendTestData		10
#define ResetMdm			11
#define pHelp				" (0-) *print all cmnds list\n"
#define pScanDev			" (1-) *unlimit scan BLE devices\n"
#define pStopScanDev		" (2-) *stop scan BLE devices\n"
#define pConnToDev			" (3-c-) *connect to selected device from table\n"
#define pScanServices		" (4-c-) *create list of services from device\n"
#define pScanDesc			" (5-c-) *create list of services from device\n"
#define pSetupSendSvc		" (6-c-rx-tx-) *send data to selected device from table\n"
#define pSendToDev			" (7-c-d-) *send data to selected device from table\n"
#define pDisConn			" (8-c-) *disconnect from selected device from table\n"
#define pDebudSwitch		" (9-0/1/2-) *0-off debug, 1-on debug, 2-measure time between msgs\n"
#define pSendTestData		" (10-c-n-) *send test string\n"
#define pResetMdm			" (11-) *reset modem\n"

//==============================================================================
// Parsing command parametr
//==============================================================================
function str_to_id()
	dim input_param$,param,SepPos
	SepPos=StrPos(urx$,Separator$,0)
	if (SepPos==-1) then 
		param=-1
		print "-Cmnd separator '-' not found\n"
	else
		input_param$=Left$(urx$,SepPos)
		param=strvaldec(input_param$)
		StrShiftLeft(urx$,SepPos+1)
		// if (param>device_addr_overall-1) then
			// param=-1
			// print "-Id bigger then max: ";integer.d'device_addr_overall;"\n"
		// endif
	endif
endfunc param

//==============================================================================
// Send data through BLE
//==============================================================================
function SendToBle(ConnId,data$)
	DIM DataToSend$
	IF BufferState == 0 then				
		DataToSend$ = Left$(data$, nAttributeLength) // Ensure that we only read nAttribureLength
		rc = BLEGATTCWRITECMD(ConnId, RXHandle, DataToSend$)
		select rc
			case 0
				StrShiftLeft(data$,nAttributeLength)
				if (debsw==1) then : print "-Succs send to char:";RXHandle;"\n" : endif
			case 24614
				print "-Connection Id not correct, rc=";integer.h'rc;"\n"
				exitfunc 2
			case 24662
				print "-Data to send is empty, rc=";integer.h'rc;"\n"
				exitfunc 0
			case else
				BufferState = 1
				if (debsw==1) then : print "-Ble send error! rc=";integer.h'rc;"\n" : endif
		endselect
	else 
		if (debsw==1) then : print "-Buf full\n" : endif
		exitfunc 0 
	endif
	if strlen(data$)==0 then
		if (debsw==1) then : print "-Buff conn: ";ConnId;" empty\n" : endif
		exitfunc 0 
	endif
endfunc 1

//==============================================================================
// EVDISCSVC event handler
//==============================================================================
function HndlrPrimSvc(cHndl,svcUuid,sHndl,eHndl) as integer
	if cHndl!=PrevHndl then : print "-Connection: ";cHndl;"\n" : endif
	print "-SVC:";integer.h'svcUuid;" handler=";sHndl;" to ";eHndl;"\n"
	PrevHndl=cHndl
	if sHndl==0 then 
		if (debsw==1) then : print "-Scan svc complete\n" : endif
		exitfunc 0
	else 
		sAttr=sHndl
		eAttr=eHndl
		rc=BleDiscCharFirst(cHndl,0,sAttr,eAttr)
		if rc!=0 then 
			if (debsw==1) then : print "-Scan char abort\n" : endif
		endif
	endif
endfunc 1

//==============================================================================
// EVDISCCHAR event handler
//==============================================================================
function HandlerCharDisc(cHndl,cUuid,cProp,hVal,isUuid) as integer
	if cUuid!=0 then 
		print "--CHAR:";integer.h'cUuid
		select cProp
			case 2
				print "(r)"
			case 4
				print "(w-w/o-resp)"
			case 8
				print "(w)"
			case 16
				print "(n-w-cccd)"
			case 32
				print "(i-w-cccd)"
			case else
				print "(";cProp;")"
		endselect
		print" handler=";hVal;"\n"
	endif
	IF hVal == 0 THEN
		if (debsw==1) then : PRINT "-Char scan complete\n" : endif
		rc=BleDiscServiceNext(cHndl)
		if rc!=0 then 
			if (debsw==1) then : print "-Scan svc abort\n" : endif
			exitfunc 0
		endif
		//EXITFUNC 0
	ELSE
		rc = BleDiscCharNext(conn_table(CurrConnId))
		IF rc != 0 THEN
			if (debsw==1) then : PRINT "-Char scan abort\n" : endif
			EXITFUNC 0
		ENDIF
	ENDIF
endfunc 1

//==============================================================================
// EVDISCDESC event handler
//==============================================================================
function HandlerDescDisc(cHndl,cUuid,hndl) as integer
	if cUuid!=0 then 
		print "  DESC:"
		//print " cHndl=";cHndl
		print " dscUuid=";integer.h' cUuid
		print " dscHndl=";hndl;"\n"
		IF hndl == 0 THEN
			PRINT "-Descriptor Scan complete\n"
			EXITFUNC 0
		ELSE
			rc = BleDiscDescNext(cHndl)
			IF rc != 0 THEN
				PRINT "-Descriptor scan abort\n"
				EXITFUNC 0
			ENDIF
		ENDIF
	endif
endfunc 1

//==============================================================================
// Send test string 
//==============================================================================
function SendKbytes ()
	data_table$[PrevConnId]=TestStr$
	if sendcount<kbytes-1 then
		do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
		until rc==0
		sendcount=sendcount+1
		if (debsw==1) then : print sendcount;" send\n" : endif
	else
		sendcount=0
		SendTestFlag=0
		TimerCancel(0)
		endif
endfunc 1

//-------------------------------------------------------------------------------
// Function for parsing commands
//-------------------------------------------------------------------------------
sub CommandParser(CmdNum)
	select CmdNum
		//-------------------------------------------------------------------------------
		case Help
			print "-";integer.d'CmdNum;"-List of supported commands:\n"
			print pHelp;pScanDev;pStopScanDev;pConnToDev;pSendToDev;pDisConn;pDebudSwitch;pSendTestData;pResetMdm
		//-------------------------------------------------------------------------------
		case ScanDev
			rc = BleScanStart(time_to_scan, 0)
			if rc == 0 then
				print "-";integer.d'ScanDev;"-Scan started over CODED PHY\n"
			else 
				print "-";integer.d'ScanDev;"-Scan failed with error: ";integer.h'rc;"\n"
			endif
		//-------------------------------------------------------------------------------
		case StopScanDev
			rc = BleScanStop() 
			if SysInfo(2016)==0 THEN 
				PRINT "-";integer.d'StopScanDev;"-Scan stopped\n"
				//rc = BleScanFlush()
			endif
			print "-";integer.d'StopScanDev;"-";dev_cnt;" device in table: \n"
			dim i
			for i=0 to dev_cnt-1
				print "-";integer.d'StopScanDev;"-";i;"-"; strhexize$(addr_table$[i]);"-";msg_cnt[i];"\n"
				msg_cnt[i]=1
				if (strlen(addr_table$[i])==0) then : break : endif
			next
		//-------------------------------------------------------------------------------
		case ConnToDev
			ad_from_table=str_to_id()
			if (ad_from_table>-1)&&(ad_from_table<device_addr_overall) then
				rc = BleConnect(addr_table$[ad_from_table], 5000, 7500, 150000, 5000000)
				if rc == 0 then
					dim conn_addr$:conn_addr$=strhexize$(addr_table$[ad_from_table])
					print "-";integer.d'ConnToDev;"-Connecting to ";conn_addr$;" ...\n"
				else
					print "-";integer.d'ConnToDev;"-Unable to connect, error: ";integer.h'rc;"\n"
				endif
			else : print "-Id not correct\n"	
			endif
		//-------------------------------------------------------------------------------
		case ScanSvcChar
			CurrConnId=str_to_id()
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				print "-";integer.d'ScanSvcChar;"-Start scanning services and chars:\n"
				rc=BleDiscServiceFirst(conn_table(CurrConnId),0,0)
				if rc==0 then : WAITEVENT : endif
				print "-";integer.d'ScanSvcChar;"-All service & char finded\n" 
			endif
		//-------------------------------------------------------------------------------
		case ScanDesc
			CurrConnId=str_to_id()
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				rc=str_to_id()
				print "-";integer.d'ScanDesc;"-Start scanning descriptors:\n"
				rc = BleDiscDescFirst(conn_table(CurrConnId),0,rc)
				if rc==0 then : WAITEVENT : endif
				print "-All service & char finded\n" 
			endif
		//-------------------------------------------------------------------------------
		case SetupSendSvc
			CurrConnId=str_to_id()
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				rc=str_to_id()
				RxHandle=rc
				print "RX svc setup to:";RxHandle;"\n"
				rc=str_to_id()
				TXHandle=rc
				print "TX svc setup to:";TXHandle;"\n"
				rc=str_to_id()
				TXCCCDHandle=rc
				Val$ = "\01\00"
				rc = BLEGATTCWRITE(ConnectionID, TXCCCDHandle, Val$)
				if rc==0 then : print "CCCD enabled\n" : endif
			endif
		//-------------------------------------------------------------------------------
		case SendToDev
			CurrConnId=str_to_id()
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				data_table$[CurrConnId]=urx$
				if (CurrConnId==PrevConnId) then					
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				else
					if (strlen(data_table$[PrevConnId])!=0) then
						if (debsw==1) then : print "-Old conn send\n" : endif
						do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
						until rc==0
					else 
						if (debsw==1) then : print "-New conn send\n" : endif
						do 
							rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
							if (rc==2) then 
								data_table$[CurrConnId]=""
								break 
							endif
						until rc==0		 
					endif
					PrevConnId=CurrConnId
				endif
			else : print "-Id not correct\n"
			endif
		//-------------------------------------------------------------------------------
		case DisConn
			rc=str_to_id()
			if (rc>-1)&&(rc<device_addr_overall) then
				rc = BleDisconnect(conn_table(rc))
				if rc==0 then : print "-";integer.d'DisConn;"-Close conncection: ";conn_table(rc); "\n"
				else : print "-";integer.d'DisConn;"-Unable to close conncection, error: ";integer.h'rc;"\n"
				endif
			else : print "-Id not correct\n"
			endif
		//-------------------------------------------------------------------------------
		case DebudSwitch	
			rc=str_to_id()
			select rc
				case 0
					debsw=rc
					print "-";integer.d'DebudSwitch;"-Debug off\n"
				case 1 
					debsw=rc
					print "-";integer.d'DebudSwitch;"-Debug on\n"
				case 2
					debsw=rc
					print "-";integer.d'DebudSwitch;"-Debug msg timer on\n"
				case else
			endselect
		//-------------------------------------------------------------------------------
		case SendTestData
			CurrConnId=str_to_id()
			SendTestFlag=1
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				kbytes=str_to_id()
				if (kbytes>-1) then
					data_table$[CurrConnId]=TestStr$
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				endif
			else : print "-Id not correct\n"
			endif
		//-------------------------------------------------------------------------------
		case ResetMdm
			Reset(0)
		//-------------------------------------------------------------------------------
		case else
			PRINT "-Unknown cmnd. ECHO=";strhexize$(urx$);"\n"
	endselect
endsub	
