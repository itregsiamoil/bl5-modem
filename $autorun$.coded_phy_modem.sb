#include "modem.setup.sblib"
#include "modem.command.sblib"

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
	dim ndisc,rsi,ad$,dta$
	rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
	while (rc==0)
		dim i,new_dev_flag
		new_dev_flag = 1
		for i=0 to device_addr_overall-1			
			rc=StrCmp(ad$,addr_table$[i])
			if (rc==0) then 
				if (msg_cnt[i]==1) then 
					print "-";integer.d'ScanDev;"-Device №";i;" found: "; strhexize$(addr_table$[i]);" "; strhexize$(dta$);" ";ndisc;" RSSI=";rsi;"\n"
				endif
				msg_cnt[i]=msg_cnt[i]+1
				break
			endif
		next
		if dev_cnt==device_addr_overall then : dev_cnt=0 : endif //адреса пишутся в таблицу циклически после device_addr_overall->0 и тд
		if (rc!=0) then
			addr_table$[dev_cnt]=ad$
			dev_cnt=dev_cnt+1
		endif	
		rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)		
	endwhile
endfunc 1

//------------------------------------------------------------------------------
// EVNOTIFYBUF - Buffer fro BleGattcWriteCmd has been emptied
//------------------------------------------------------------------------------
FUNCTION HndlrNtfyBuf()
    IF BufferState == 1 THEN
        BufferState = 0
        // rc = SendUartToBleDevice()
    // ELSE
        // //Check for UART data
        // rc = SendUartToBleDevice()
    ENDIF
	//print "Ntfy buf empty\n"
ENDFUNC 1
	
//==============================================================================
// This handler is called when data recieved through UART
//==============================================================================
FUNCTION HndlrUartRx() 
	dim uLen
	uLen = UartReadMatch(urx$, 0x0D) //Read data from UART
	if (uLen>0) then
		urx$=left$(urx$,uLen-1) //удаление из буфера 0x0D
		rc=str_to_id() //получение номера команды
		CommandParser(rc)
		urx$=""
	endif
ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRNOTIFYEX - Received BLE notification
//------------------------------------------------------------------------------
FUNCTION HndlrAttrNotifyEx(BYVAL hConn AS INTEGER, BYVAL hAttr AS INTEGER,BYVAL nType AS INTEGER, BYVAL nLength AS INTEGER,BYVAL data$ AS STRING)
    IF (hAttr == TXHandle) then
        // Just print data that we got 
        PRINT "-";integer.d'SendToDev;"-";hConn;"-";nLength;"-";Data$;"\n"
    ENDIF
    Data$ = ""
ENDFUNC 1
		
//-------------------------------------------------------------------------------
// This function is used to configure the BL654 to use high bandwidth
//-------------------------------------------------------------------------------
FUNCTION BleHighBandwidth()
	dim nBandwidth
    // Get current bandwidth configuration
	rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, nBandwidth)

    // Check if these are the values needed to achieve DLE
    IF  (nBandwidth != BLE_ENABLE_HIGH_BANDWIDTH) THEN
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
        rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
        // Change the bandwidth configuration to HIGH
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, BLE_ENABLE_HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten
        Reset(0)
    ENDIF

ENDFUNC 0

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
	print "-";integer.d'ScanDev;"-Scanning stopped via timeout\n"
endfunc 1

//==============================================================================
// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    print "-";integer.d'ConnToDev;"-PHY Changed: Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx=";PhyRx;"\n"
endfunc 1

//==============================================================================
// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    print "-";integer.d'ConnToDev;"-PHY Request - PhyTx=";PhyTx;" PhyRx=";PhyRx;"\n"
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

//------------------------------------------------------------------------------
// EVBLE_CONN_TIMEOUT - BLE connection timed out
//------------------------------------------------------------------------------
FUNCTION HndlrConnTO()
    print "-";integer.d'ConnToDev;"-Connection attempt timed out.\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRWRITE - Remote characteristic written
//------------------------------------------------------------------------------
FUNCTION HndlrAttrWrite(cHndl,aHndl,nSts)
	//print cHndl;"-";aHndl;"-";nSts;"\n";
    IF (Mode == 7) THEN
        //Enable TX notIFications
        Mode = 8
        Val$ = "\01\00"
        rc = BLEGATTCWRITE(ConnectionID, TXCCCDHandle, Val$)
    ELSEIF (Mode == 8) THEN
        //Write to Modem In
        Mode = 9
        Val$ = "\01"
        BufferFull = 0
        rc = BLEGATTCWRITE(ConnectionID, MIHandle, Val$)
    ELSEIF (Mode == 9) THEN
        //Now ready to send data
        BufferFull = 0
        BufferState = 0
        Mode = 10
        urx$ = ""
        BleBuf$ = ""
        // Now that everything is setup, Requst a switch to CODED PHY
        rc = BlePhySet(ConnectionID, BLE_CODED_PHY, BLE_CODED_PHY, 0)
    ELSEIF (Mode == 10) THEN
        //UART data was written
        BufferState = 0
        rc = HndlrUartRx()
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
SUB ShowConnParms(nConnHandle)
    DIM intrvl,sprvto,slat
    rc = BleGetCurConnParms(nConnHandle,intrvl,sprvto,slat)
    print "-";integer.d'ConnToDev;"-ConnParms: Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
ENDSUB

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
	select nMsgId
		case BLE_EVBLEMSGID_CONNECT
			ConnectionID = nCtx
			print "-";integer.d'ConnToDev;"-Connectinon ";ConnectionID;" for dev №";integer.d'ad_from_table;" created\n"	
			conn_table[ad_from_table]=ConnectionID
			ShowConnParms(ConnectionID)	
			Mode = 7    // This is checked in HndlrAttrWrite to move forward in state machine
			// Enable modem out notifications
			Val$ = "\01\00"
			rc = BLEGATTCWRITE(ConnectionID, MOCCCDHandle, Val$)
		case BLE_EVBLEMSGID_DISCONNECT
			print "-";integer.d'DisConn;"-Disconnected!\n"
			//BleGattcClose()
		case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
			ShowConnParms(ConnectionID)
		case else
	endselect
endfunc 1

FUNCTION HndlrDiscon(BYVAL hConn AS INTEGER, BYVAL nRsn AS INTEGER) AS INTEGER 
	PRINT "-";integer.d'DisConn;"-Connection ";hConn;" closed with code: 0x";nRsn;"\n"
ENDFUNC 0

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************
dim x
for x=0 to device_addr_overall-1 : msg_cnt[x]=1 : next //инициализация таблицы сообщений
// Enable high bandwidth
rc = BleHighBandwidth()
if UartInfo(0)==0 then : rc = UartOpen(UART_BAUDRATE,U_TX_BUF,U_RX_BUF,"CN81H")
else : UartClose() : rc = UartOpen(UART_BAUDRATE,U_TX_BUF,U_RX_BUF,"CN81H")
endif
rc = BleTxPowerSet(TRANSMIT_POWER) //установка мощности передатчика
// Set Scanning PHYs to CODED PHY, enable extended scanning
rc = BleScanConfig(0,scan_interval)
rc = BleScanConfig(1,scan_window)
rc = BleScanConfig(3,device_addr_overall)
rc = BleScanConfig(4,BLE_CODED_PHY)
rc = BleScanConfig(5,BLE_EXTENDED_SCANNING)
// Set connection PHYs to CODED PHY, enable extended connection
rc = BleConnectConfig(10,BLE_CODED_PHY)
rc = BleConnectConfig(11,BLE_EXTENDED_SCANNING)
rc = BleGattcOpen(4096, 0)
//PRINT "-Modem init/Tx power="; SysInfo(2008);"\n"
PRINT "-Hello!\n"

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
// Generic BLE events
OnEvent	EVBLE_SCAN_TIMEOUT  	call HandlerBlrScanTimOut
OnEvent	EVBLE_ADV_REPORT    	call HandlerAdvRpt
OnEvent	EVBLEMSG            	call HandlerBleMsg
OnEvent EVATTRWRITE         	CALL HndlrAttrWrite
OnEvent EVBLE_CONN_TIMEOUT  	CALL HndlrConnTO
OnEvent EVATTRNOTIFYEX      	CALL HndlrAttrNotifyEx      // Used if AT+CFG 213=1
ONEVENT EVNOTIFYBUF       		CALL HndlrNtfyBuf
//ONEVENT EVDISCON 				CALL HndlrDiscon
// UART event
OnEvent	EVUARTRX 				call HndlrUartRx
// BLE PHY
OnEvent	EVBLE_PHY_UPDATED  		call HandlerPhyChngd
OnEvent	EVBLE_PHY_REQUEST  		call HandlerPhyReq

WaitEvent // Wait for a synchronous event.
