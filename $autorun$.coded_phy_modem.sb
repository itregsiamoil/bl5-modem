#include "modem.setup.sblib"
#include "modem.command.sblib"

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
	dim ndisc,rsi,ad$,dta$
	rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
	while (rc==0)
		dim i
		for i=0 to device_addr_overall-1
			rc=StrCmp(ad$,addr_table$[i])
			if (rc==0) then			//print device address once
				if (msg_cnt[i]==1) then 
					print "-";integer.d'ScanDev;"-Device №";i;" found: "; strhexize$(addr_table$[i]);" ";ndisc;" RSSI=";rsi//;"\n"					
					if strlen(adv_table$[i])==0 then : print " NULL\n"
					else : print " ";adv_table$[i];"\n"//;"("; strhexize$(name$);")\n"
					endif
				endif
				msg_cnt[i]=msg_cnt[i]+1
				break
			endif
		next
		if dev_cnt==device_addr_overall then : dev_cnt=0 : endif //address table limited to device_addr_overall, 0-device_addr_overall-0
		if (rc!=0) then				//add new address in table
			addr_table$[dev_cnt]=ad$
			dim size,type,name$
			if (debsw==1) then : print "-dta ";dta$ : endif
			while type!=9
				size=strgetchr(dta$,0)
				if (debsw==1) then : print "-size ";size : endif
				type=strgetchr(dta$,1)
				if (debsw==1) then : print "-type ";type : endif
				if type!=9 then : strshiftleft(dta$,size+1)
				else : adv_table$[dev_cnt]=mid$(dta$,2,size-1) : break
				endif
				if strlen(dta$)==0 then : break : endif
			endwhile
			type=0 : size=0
			dev_cnt=dev_cnt+1
		endif	
		rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)		
	endwhile
endfunc 1

//------------------------------------------------------------------------------
// EVNOTIFYBUF - Buffer fro BleGattcWriteCmd has been emptied
//------------------------------------------------------------------------------
FUNCTION HndlrNtfyBuf()
    IF BufferState == 1 THEN
		TimerCancel(0)
        BufferState = 0
        do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
		until rc==0
    // ELSE
        // rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
    ENDIF
	if (debsw==1) then : print "Client: data rcv &  buf empty\n" : endif
	if SendTestFlag==1 then
		if (strlen(data_table$[PrevConnId])==0) then : TimerStart(0,55,1) : endif
	endif
ENDFUNC 1
	
//==============================================================================
// This handler is called when data recieved through UART
//==============================================================================
FUNCTION HndlrUartRx() 
	dim uLen
	uLen = UartReadMatch(urx$, 0x0D) //Read data from UART
	if (uLen>0) then
		urx$=left$(urx$,uLen-1) //удаление из буфера 0x0D
		rc=str_to_id() //получение номера команды
		CommandParser(rc)
		urx$=""
	endif
ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRNOTIFYEX - Received BLE notification
//------------------------------------------------------------------------------
dim LastTick
FUNCTION HndlrAttrNotifyEx(BYVAL hConn AS INTEGER, BYVAL hAttr AS INTEGER,BYVAL nType AS INTEGER, BYVAL nLength AS INTEGER,BYVAL data$ AS STRING)
    IF (hAttr == TXHandle) then	
		dim i
        for i=0 to device_addr_overall-1
			if (hConn==conn_table[i]) then
				PRINT "-";integer.d'SendToDev;"-";i;"-";nLength;"-";Data$;"\n" // Just print data that we got 
				if (debsw==2) then
					print "time-";GetTickCount()-LastTick;"\n"
					LastTick=GetTickCount()
				endif
				break
			endif
		next
    ENDIF
    Data$ = ""
ENDFUNC 1
		
//-------------------------------------------------------------------------------
// This function is used to configure the BL654 to use high bandwidth
//-------------------------------------------------------------------------------
FUNCTION BleHighBandwidth()
	dim HighBandwidth,StringEvent
	rc = NvCfgKeyGet(USE_STRINT_IN_EVENTS_KEY_ID, StringEvent) // Get High bandwidth value
	IF  (StringEvent != USE_STRING_IN_EVENTS) THEN
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
		rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
		Reset(0)
    ENDIF
    rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HighBandwidth) // Get High bandwidth value
    IF  (HighBandwidth != HIGH_BANDWIDTH) THEN
        // Change the bandwidth configuration to HIGH (6 packets per interval)
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten  
		Reset(0)		
    ENDIF
ENDFUNC 0

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
	print "-";integer.d'StopScanDev;"-Scanning stopped via timeout\n"
	CommandParser(2)
endfunc 1

//==============================================================================
// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print "-PHY Changed: Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx=";PhyRx;"\n" : endif
endfunc 1

//==============================================================================
// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print "-PHY Request - PhyTx=";PhyTx;" PhyRx=";PhyRx;"\n" : endif
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

//------------------------------------------------------------------------------
// EVBLE_CONN_TIMEOUT - BLE connection timed out
//------------------------------------------------------------------------------
FUNCTION HndlrConnTO()
    print "-";integer.d'ConnToDev;"-Connection attempt timed out.\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRWRITE - Remote characteristic written
//------------------------------------------------------------------------------
FUNCTION HndlrAttrWrite(cHndl,aHndl,nSts)
        BufferFull = 0
		BufferState = 0
        urx$ = ""
        BleBuf$ = ""
        // Now that everything is setup, Requst a switch to CODED PHY
        //rc = BlePhySet(cHndl, BLE_PHY, BLE_PHY, 0)
        rc = HndlrUartRx()
ENDFUNC 1

//------------------------------------------------------------------------------
// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
SUB ShowConnParms(nConnHandle)
    DIM intrvl,sprvto,slat
    rc = BleGetCurConnParms(nConnHandle,intrvl,sprvto,slat)
    if (debsw==1) then : print "-ConnParms: Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n" : endif
ENDSUB

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer	
	select nMsgId		
		case BLE_EVBLEMSGID_CONNECT
			rc = BleGattcOpen(GATT_BUF, 0)
			ConnectionID = nCtx
			print "-";integer.d'ConnToDev;"-Connectinon ";ConnectionID;" for dev №";integer.d'ad_from_table;" created\n"	
			conn_table[ad_from_table]=ConnectionID
			ShowConnParms(ConnectionID)	
			dim CCCD_ON$:CCCD_ON$ = "\01\00"
			rc = BLEGATTCWRITE(ConnectionID, TXCCCDHandle, CCCD_ON$)
		case BLE_EVBLEMSGID_DISCONNECT
			dim i
			ConnectionID = nCtx
			for i=0 to device_addr_overall-1
				if (ConnectionID==conn_table[i]) then
					PRINT "-";integer.d'DisConn;"-";i;"-Disconnected!\n"
					conn_table[i]=0
					break
				endif
			next
			//BleGattcClose()
		case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
			ShowConnParms(ConnectionID)
		case else
	endselect
endfunc 1

//******************************************************************************
// main()
//******************************************************************************
dim x
for x=0 to device_addr_overall-1 : msg_cnt[x]=1 : next //инициализация таблицы сообщений
// Enable high bandwidth
rc = BleHighBandwidth()
if UartInfo(0)==0 then : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
else : UartClose() : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
endif
rc = BleTxPowerSet(TRANSMIT_POWER) //установка мощности передатчика
// Set Scanning PHYs to CODED PHY, enable extended scanning
rc = BleScanConfig(0,scan_interval)
rc = BleScanConfig(1,scan_window)
rc = BleScanConfig(3,device_addr_overall)
rc = BleScanConfig(4,BLE_PHY)
rc = BleScanConfig(5,SCAN_TYPE)
// Set connection PHYs to CODED PHY, enable extended connection
rc = BleConnectConfig(10,BLE_PHY)
rc = BleConnectConfig(11,SCAN_TYPE)
//rc = BleGattcOpen(GATT_BUF, 0)
PRINT "-Hello!\n-Write '0-' for help, '11-' for hardware parameters\n"

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
// Generic BLE events
OnEvent	EVBLE_SCAN_TIMEOUT  	call HandlerBlrScanTimOut
OnEvent	EVBLE_ADV_REPORT    	call HandlerAdvRpt
OnEvent	EVBLEMSG            	call HandlerBleMsg
OnEvent EVATTRWRITE         	call HndlrAttrWrite
OnEvent EVBLE_CONN_TIMEOUT  	call HndlrConnTO
OnEvent EVATTRNOTIFYEX      	call HndlrAttrNotifyEx      // Used if AT+CFG 213=1
OnEvent EVNOTIFYBUF       		call HndlrNtfyBuf
OnEvent EVDISCPRIMSVC 			call HndlrPrimSvc
OnEvent EVDISCCHAR 				call HandlerCharDisc
OnEvent EVDISCDESC 				call HandlerDescDisc
// UART event
OnEvent	EVUARTRX 				call HndlrUartRx
// BLE PHY
OnEvent	EVBLE_PHY_UPDATED  		call HandlerPhyChngd
OnEvent	EVBLE_PHY_REQUEST  		call HandlerPhyReq
// Timer for test string sending
OnEvent EVTMR0 					call SendKbytes
// Wait for a synchronous event
WaitEvent
