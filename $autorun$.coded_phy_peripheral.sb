#include "peripheral.setup.sblib"

// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
sub AssertRC(rc, tag)
    if (rc != 0) then
        print "Assert Error ";integer.h'rc;" at tag ";tag;"\r\n"
    endif
endsub

// Enable the High Bandwidth configuration in order to achieve the long range
//==============================================================================
function EnableHighBandwidth()
	rc = NvCfgKeyGet(USE_STRINT_IN_EVENTS_KEY_ID, temp) // Get High bandwidth value
	if  (temp != USE_STRING_IN_EVENTS) then
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
		rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
		Reset(0)
    endif
    rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, temp) // Get High bandwidth value
    if  (temp != BLE_ENABLE_HIGH_BANDWIDTH) then
        // Change the bandwidth configuration to HIGH (6 packets per interval)
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, BLE_ENABLE_HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten  
		Reset(0)		
    endif
endfunc 0

// Function that will create a custom VSP service with Tx/Rx characteristics
//==============================================================================
function ServiceAndAdvertInit()
    dim mdCccd,mdVal,s$,svcID//,UUIDStr$
    s$ = "\00" //Default value for characteristics  
    //Create the VSP service
	BaseUUID = BleHandleUuid16(BASEUUID)
	// UUIDStr$=BASEUUID
	// BaseUUID = BleHandleUuid128(UUIDStr$)
    rc = BleServiceNew(1, BaseUUID, svcID)
    //Create the RX characteristic
    mdVal = BleAttrMetadata(0,1,nAttributeLength,1,rc)
    temp = RXUUID
    temp = BleHandleUuidSibling(BaseUUID, temp)
    rc = BleCharNew(8, temp, mdVal, 0, 0)
	temp=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	temp$="RX data"
	rc=BleCharDescUserDesc(temp$,temp)
    rc = BleCharCommit(svcID, s$, RXchar)
    //Create the TX characteristic
    mdVal = BleAttrMetadata(0,0,nAttributeLength,1,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc)
    temp = TXUUID
    temp = BleHandleUuidSibling(BaseUUID, temp)
    rc = BleCharNew(16, temp, mdVal, mdCccd, 0)
	temp=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	temp$="TX data"
	rc=BleCharDescUserDesc(temp$,temp)
    rc = BleCharCommit(svcID, s$, TXchar)
    rc = BleServiceCommit(svcID)
	
	//Create advertising messages/sets
	dim scRpt$,adRpt$//,ad1Rpt$
	rc=BleGapSvcInit(DevName$,0,BleAppearance,MinConnInterval,MaxConnInterval,4000000,0) : AssertRC(rc,1)
	rc=BleAdvRptInit(adRpt$, 6, AddAppearanceToAdv, DevNameLength) : AssertRC(rc,2)
	rc=BleScanRptInit(scRpt$)
	
	//temp$=strdehexize$(LESupFutr$)
	//rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType1,temp$) : AssertRC(rc,3)
	temp$=strdehexize$(tag$)+Company$
	rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,temp$) : AssertRC(rc,5)
	temp$=strdehexize$(http$)+URI$
	rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,temp$) : AssertRC(rc,4)
	
	//rc=BleAdvRptsCommit(adRpt$,scRpt$) : AssertRC(rc,6)
	rc=BleAdvSetCreate(0,9,1,0,Addr$,"") : AssertRC(rc,7)
	rc=BleAdvSetNewData(0,adRpt$,scRpt$) : AssertRC(rc,8)
endfunc 0

// Start LE Adverts
//==============================================================================
function BleStartAdverts()
	if BLE_PHY==BLE_CODED_PHY then
		rc=BleAdvSetStart(0,AdvInterval,0,0,0) : AssertRC(rc,9)
	else
		rc=BleAdvertStart(ADV_TYPE, Addr$, AdvInterval, 0, 0) : AssertRC(rc,10)
	endif
endfunc 0

// Cmnd parsing
//==============================================================================
function ModeCheck(cnt)
	//print "check:";UartData$;cnt;"\n"
	if (cnt<11) then //+2 symbols for cr/lf
		if (cnt<7) then
			if (StrPos(UartData$,DataModeStr$,0)!=-1) then 
				Mode=DataMode
				UartData$=""
				print Sep;"DataModeOn\n"
				exitfunc 0
			endif
		else
			if (StrPos(UartData$,CmndModeStr$,0)!=-1) then 
				Mode=CmndMode
				UartData$=""
				print Sep;"CmndModeOn\n"
				exitfunc 0
			endif
		endif
	endif
endfunc 1

// EVUARTRX - Function handler for UART data receive
//==============================================================================
function HndlrUartRx()
	TimerStart(1,5,0)
endfunc 1

// Buffered uart handler
//==============================================================================
function HndlrBufferedUart()
    select Mode
		case DataMode
			rc = UARTREADN(UartData$,U_BUF)
			if ConnectionID!=0 then
				if rc > 0 then
					if (ModeCheck(rc)!=0) then
						if BufferState == 0 then
							print "datamode:";UartData$;"\n"
							temp$ = Left$(UartData$, nAttributeLength)
							rc = BLECHARVALUENOTIFY(TXchar, temp$)
							select rc
								case 0
									rc=strlen(temp$)
									StrShiftLeft(UartData$,rc)
									#cmpif 0xFF : print "-Succs send to char:";TXchar;"\n"
								case else
									BufferState = 1
									#cmpif 0xFF : print "-Ble send error! rc=";integer.h'rc;" msg-";temp$;"\n"
							endselect
						endif
					endif
					UartData$=""
				endif
			endif
			break
		case CmndMode
			rc = UartReadMatch(UartData$, 0x0D)
			if rc > 0 then
				if (ModeCheck(rc)!=0) then
				
				print "cmndmode:";UartData$;"\n"
				endif
				UartData$=""
			endif
			break
		case else
	endselect
endfunc 1

// EVNOTIFYBUF - Notification buffer was emptied
//==============================================================================
function HndlrNtfyBuf()
    if BufferState == 1 then
        BufferState = 0
        rc=HndlrUartRx()
    else
        rc=HndlrUartRx()
    endif
	#cmpif 0xFF : print "Client: data rcv &  buf empty\n"
endfunc 1

// EVCHARVALUE - Handler for characteristic value written
//==============================================================================
function HndlrCharValue(nConnHandle, charHandle, offset, len, BYVAL Rd$ AS STRING)
    // Just print the data that we got from the char
	#cmpif 0xFF : print " CharHandle-";charHandle;"\n"
    if charHandle == RXchar then
		print Rd$
		UartData$=Rd$
		rc=HndlrUartRx()
    endif
endfunc 1

// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    print "-PHY Changed-Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
endfunc 1

// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    print "-PHY Request-PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

// This shows the current connection parameters
//------------------------------------------------------------------------------
sub ShowConnParms()
    dim intrvl,sprvto,slat
    rc = BleGetCurConnParms(ConnectionID,intrvl,sprvto,slat)
    #cmpif 0xFF : print "-ConnParms-Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
endsub

// Handler for cccd value written
//==============================================================================
function HndlrCharCccd(charHandle, nVal)
    if charHandle == TXchar then
		print "-BleNotify CCCD:";nVal;"\n"
        if (nVal&0x0001) == 0x0001 then   //if notify enabled
            TimerCancel(0)     
        else
            TimerStart(0,5000,0)
        endif
    endif
endfunc 1

// Handler for cccd enable timer
//==============================================================================
function HndlrBleCccdTout()  //cccd was not enabled in time
    rc = BleDisconnect(ConnectionID)
    print "-BLE Disconnect due to cccd not enabled\n"
endfunc 1

// Function to handle Ble event messages
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)
    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        print "-Connected!\n"
        ConnectionID = nCtx
        ShowConnParms()
		Mode=DataMode
		TimerStart(0,5000,0)
    case BLE_EVBLEMSGID_DISCONNECT
        print "-Disconnected!\n"
        rc = BleStartAdverts()
		ConnectionID = 0
    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms()
    case else
    endselect
endfunc 1

// Initialization
//******************************************************************************
sub Init()
	if UartInfo(0)==0 then : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	else : UartClose() : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	endif
	rc = BleTxPowerSet(BLE_TX_POWER)
	rc = EnableHighBandwidth()
	rc = ServiceAndAdvertInit()
	rc = BleAdvertConfig(4,BLE_PHY)
	rc = BleAdvertConfig(5,BLE_PHY)
	rc = BleStartAdverts()
	temp$ = SYSINFO$(4)
	print "Device. My address is "; strhexize$(temp$);"\n"
endsub
Init()

// UART events
OnEvent EVUARTRX			call HndlrUartRx
// Generic BLE events
OnEvent EVBLEMSG			call HndlrBleMsg
OnEvent EVCHARVALUE			call HndlrCharValue         // Used if AT+CFG 213=1
OnEvent EVNOTIFYBUF			call HndlrNtfyBuf
OnEvent EvCharCccd			call HndlrCharCccd
// BLE PHY
OnEvent EVBLE_PHY_UPDATED	call HandlerPhyChngd
OnEvent EVBLE_PHY_REQUEST	call HandlerPhyReq
// Timers
OnEvent EVTMR0 				call HndlrBleCccdTout
OnEvent EVTMR1 				call HndlrBufferedUart
// Wait for a synchronous event
WAITEVENT
Reset(0)
