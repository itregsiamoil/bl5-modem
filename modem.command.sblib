//#include "modem.setup.sblib"

//Commands
#define ScanDev				1
#define StopScanDev			2
#define ConnToDev			3 //+ № из таблицы адресов
#define SendToDev			4 //+ № из таблицы адресов + данные
#define DisConn				5 //+ № из таблицы адресов
#define DebudSwitch			6
#define SendTestData		7 //+ № из таблицы адресов + количесвто по 100байт + задержка между 100 байтами

//==============================================================================
// Parsing command parametr
//==============================================================================
function str_to_id()
	dim input_param$,param,SepPos
	SepPos=StrPos(urx$,Separator$,0)
	if (SepPos==-1) then 
		param=-1
		print "-Cmnd separator '-' not found\n"
	else
		input_param$=Left$(urx$,SepPos)
		param=strvaldec(input_param$)
		StrShiftLeft(urx$,SepPos+1)
		// if (param>device_addr_overall-1) then
			// param=-1
			// print "-Id bigger then max: ";integer.d'device_addr_overall;"\n"
		// endif
	endif
endfunc param

//==============================================================================
// Send data through BLE
//==============================================================================
function SendToBle(ConnId,data$)
	DIM DataToSend$
	IF BufferState == 0 then				
		DataToSend$ = Left$(data$, nAttributeLength) // Ensure that we only read nAttribureLength
		rc = BLEGATTCWRITECMD(ConnId, RXHandle, DataToSend$)
		select rc
			case 0
				StrShiftLeft(data$,nAttributeLength)
				if (debsw==1) then : print "-Succs send\n" : endif
			case 24614
				print "-Connection Id not correct, rc=";integer.h'rc;"\n"
				exitfunc 2
			case else
				BufferState = 1
				if (debsw==1) then : print "-Ble send error! rc=";integer.h'rc;"\n" : endif
		endselect
	else 
		if (debsw==1) then : print "-Buf full\n" : endif
		exitfunc 0 
	endif
	if strlen(data$)==0 then
		if (debsw==1) then : print "-Buff conn: ";ConnId;" empty\n" : endif
		exitfunc 0 
	endif
endfunc 1

//==============================================================================
// Send test string 
//==============================================================================
function SendKbytes ()
	data_table$[CurrConnId]=TestStr$
	if sendcount<kbytes then
		do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
		until rc==0
		PrevConnId=CurrConnId
		sendcount=sendcount+1
		if (debsw==1) then : print sendcount;" send\n" : endif
	else
		sendcount=0
		TimerCancel(0)
		endif
endfunc 1

//-------------------------------------------------------------------------------
// Function for parsing commands
//-------------------------------------------------------------------------------
sub CommandParser(CmdNum)
	select CmdNum
		case ScanDev
			rc = BleScanStart(time_to_scan, 0)
			if rc == 0 then
				print "-";integer.d'ScanDev;"-Scan started over CODED PHY\n"
			else 
				print "-";integer.d'ScanDev;"-Scan failed with error: ";integer.h'rc;"\n"
			endif
		case StopScanDev
			rc = BleScanStop() 
			if SysInfo(2016)==0 THEN 
				PRINT "-";integer.d'StopScanDev;"-Scan stopped\n"
				//rc = BleScanFlush()
			endif
			print "-";integer.d'StopScanDev;"-";dev_cnt;" device in table: \n"
			dim i
			for i=0 to dev_cnt-1
				print "-";integer.d'StopScanDev;"-";i;"-"; strhexize$(addr_table$[i]);"-";msg_cnt[i];"\n"
				msg_cnt[i]=1
				if (strlen(addr_table$[i])==0) then : break : endif
			next
		case ConnToDev
			ad_from_table=str_to_id()
			if (ad_from_table>-1)&&(ad_from_table<device_addr_overall) then
				rc = BleConnect(addr_table$[ad_from_table], 5000, 7500, 150000, 5000000)
				if rc == 0 then
					dim conn_addr$:conn_addr$=strhexize$(addr_table$[ad_from_table])
					print "-";integer.d'ConnToDev;"-Connecting to ";conn_addr$;" ...\n"
				else
					print "-";integer.d'ConnToDev;"-Unable to connect, error: ";integer.h'rc;"\n"
				endif
			else : print "-Id not correct\n"	
			endif
		case SendToDev
			CurrConnId=str_to_id()
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				data_table$[CurrConnId]=urx$
				if (CurrConnId==PrevConnId) then					
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				else
					if (strlen(data_table$[PrevConnId])!=0) then
						if (debsw==1) then : print "-Old conn send\n" : endif
						do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
						until rc==0
					else 
						if (debsw==1) then : print "-New conn send\n" : endif
						do 
							rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
							if (rc==2) then 
								data_table$[CurrConnId]=""
								break 
							endif
						until rc==0		 
					endif
					PrevConnId=CurrConnId
				endif
			else : print "-Id not correct\n"
			endif
		case DisConn
			rc=str_to_id()
			if (rc>-1)&&(rc<device_addr_overall) then
				rc = BleDisconnect(conn_table(rc))
				if rc==0 then : print "-";integer.d'DisConn;"-Close conncection: ";conn_table(rc); "\n"
				else : print "-";integer.d'DisConn;"-Unable to close conncection, error: ";integer.h'rc;"\n"
				endif
			else : print "-Id not correct\n"
			endif
		case DebudSwitch	
			rc=str_to_id()
			select rc
				case 0
					print "-";integer.d'DebudSwitch;"-Debug off\n"
				case 1 
					print "-";integer.d'DebudSwitch;"-Debug on\n"
				case 2
					print "-";integer.d'DebudSwitch;"-Debug msg timer on\n"
				case else
			endselect
		case SendTestData
			dim interval
			CurrConnId=str_to_id()
			if (CurrConnId>-1)&&(CurrConnId<device_addr_overall) then
				kbytes=str_to_id()
				interval=str_to_id()
				if (interval>-1)&&(kbytes>-1) then : TimerStart(0,interval,1) : endif
			else : print "-Id not correct\n"
			endif	
		case else
			PRINT "-Unknown cmnd. ECHO=";strhexize$(urx$);"\n"
	endselect
endsub	
