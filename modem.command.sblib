// Command list
//-------------------------------------------------------------------------------
#define NumCmnds			17
dim HelpTable$[NumCmnds]
#define Help				0
#define ScanDev				1
#define StopScanDev			2
#define ConnToDev			3
#define ScanSvcChar			4
#define ScanDesc			5
#define SetupSendSvc		6
#define SendToDev			7
#define SendTestData		8
#define DisConn				9
#define DebudSwitch			10
#define ModemParams			11
#define ActiveConn			12
#define ChangePhy			13
#define ChangePower			14
#define StopApp				15
#define ResetMdm			16
HelpTable$[Help]=") print all comands list"
HelpTable$[ScanDev]=") unlimit scan BLE devices"
HelpTable$[StopScanDev]=") stop scan BLE devices"
HelpTable$[ConnToDev]="add"+Sep+") connect to selected device from table"
HelpTable$[ScanSvcChar]="conn"+Sep+") create list of services and characteristics from device"
HelpTable$[ScanDesc]="conn"+Sep+"char"+Sep+") create list of descriptors from select characteristic"
HelpTable$[SetupSendSvc]="conn"+Sep+"rx"+Sep+"tx"+Sep+"ntf"+Sep+") setup RX-TX-CCCD characteristics to chat with selected device from table"
HelpTable$[SendToDev]="conn"+Sep+"data"+Sep+") send data to selected device from table"
HelpTable$[SendTestData]="conn"+Sep+"n"+Sep+") send test string (100*n bytes) to selected device from table"
HelpTable$[DisConn]="conn"+Sep+") disconnect from selected device from table"
HelpTable$[DebudSwitch]="0/1/2"+Sep+") 0-off debug, 1-on debug, 2-measure time between msgs"
HelpTable$[ModemParams]=") show modem parameters"
HelpTable$[ActiveConn]=") show number of active connections"
HelpTable$[ChangePhy]="1/2/4"+Sep+") change modem phy level 1-BL4 1M, 2-BL5 2M, 4-BL5 CODED"
HelpTable$[ChangePower]="pwr"+Sep+") (+/-) 0/2/4/6/8 change radio transmit power"
HelpTable$[StopApp]=") exit app to AT mode, RESUME to continue run app"
HelpTable$[ResetMdm]=") reset modem"

// Parsing command parametr
//==============================================================================
function str_to_id()
	dim input_param$,param,SepPos,sepstr$
	sepstr$=Sep
	SepPos=StrPos(urx$,sepstr$,0)
	if (SepPos==-1) then 
		param=-1
		print Sep;"Cmnd separator '";Sep;"' not found\n"
	else
		input_param$=Left$(urx$,SepPos)
		param=strvaldec(input_param$)
		StrShiftLeft(urx$,SepPos+1)
	endif
endfunc param

// Check connection id in table
//==============================================================================
function CheckConnId(cmnd,id)
	dim param
	if (id<device_addr_overall) then
		if conn_table[id]>1 then
			if cmnd==ConnToDev then		
				param=-1
				print Sep;integer.d'ConnToDev;Sep;"Connection already exist\n"
			else : param=id
			endif
		else
			if cmnd==ConnToDev then
				param=1
				print Sep;integer.d'cmnd;Sep;"First connection\n"
			else
				param=-1
				print Sep;integer.d'cmnd;Sep;"Connection id not exist in table\n"
			endif
		endif
	else
		param=-1
		print Sep;integer.d'cmnd;Sep;"Id bigger then max: ";integer.d'device_addr_overall;"\n"
	endif
endfunc param

// Send data through BLE
//==============================================================================
function SendToBle(ConnId,data$)
	DIM DataToSend$
	IF BufferState == 0 then				
		DataToSend$ = Left$(data$, nAttributeLength) // Ensure that we only read nAttribureLength
		rc = BLEGATTCWRITECMD(ConnId, RXHandle, DataToSend$)
		select rc
			case 0
				StrShiftLeft(data$,nAttributeLength)
				if (debsw==1) then : print Sep;"Succs send to char:";RXHandle;"\n" : endif
			case 24614
				print Sep;"Connection Id not correct, rc=";integer.h'rc;"\n"
				exitfunc 2
			case 24662
				print Sep;"Data to send is empty, rc=";integer.h'rc;"\n"
				exitfunc 0
			case else
				BufferState = 1
				if (debsw==1) then : print Sep;"Ble send error! rc=";integer.h'rc;"\n" : endif
		endselect
	else 
		if (debsw==1) then : print Sep;"Buf full\n" : endif
		exitfunc 0 
	endif
	if strlen(data$)==0 then
		if (debsw==1) then : print Sep;"Buff conn: ";ConnId;" empty\n" : endif
		exitfunc 0 
	endif
endfunc 1

// EVDISCSVC event handler
//==============================================================================
function HndlrPrimSvc(cHndl,svcUuid,sHndl,eHndl) as integer
	if svcUuid!=0 then
		if cHndl!=PrevHndl then : print Sep;integer.d'ScanSvcChar;Sep;"Connection: ";cHndl;"\n" : endif
		print Sep;integer.d'ScanSvcChar;Sep;"SVC";Sep;integer.h'svcUuid;" handler=";sHndl;" to ";eHndl;"\n"
		PrevHndl=cHndl
	endif
	if sHndl==0 then 
		if (debsw==1) then : print Sep;"Scan svc complete\n" : endif
		exitfunc 0
	else
		rc=BleDiscCharFirst(cHndl,0,sHndl,eHndl)
		if rc!=0 then
			if (debsw==1) then : print Sep;"Scan char abort\n" : endif
		endif
	endif
endfunc 1

// EVDISCCHAR event handler
//==============================================================================
function HandlerCharDisc(cHndl,cUuid,cProp,hVal,isUuid) as integer
	if cUuid!=0 then 
		print Sep;integer.d'ScanSvcChar;Sep;"CHAR";Sep;integer.h'cUuid
		select cProp
			case 2
				print "(r)" : break
			case 4
				print "(w-w/o-resp)" : break
			case 8
				print "(w)" : break
			case 10
				print "(r/w)" : break
			case 16
				print "(n-w-cccd)" : break
			case 18
				print "(r/n-w-cccd)" : break
			case 24
				print "(w/n-w-cccd)" : break
			case 26
				print "(r/w/n-w-cccd)" : break
			case 32
				print "(i-w-cccd)" : break
			case 48
				print "(n/i-w-cccd)" : break
			case else
				print "(";cProp;")"
		endselect
		print" handler=";hVal;"\n"
	endif
	if hVal == 0 then
		if (debsw==1) then : print Sep;"Char scan complete\n" : endif
		rc=BleDiscServiceNext(cHndl)
		if rc!=0 then 
			if (debsw==1) then : print Sep;"Scan svc abort\n" : endif
			exitfunc 0
		endif
		//exitfunc 0
	else
		rc = BleDiscCharNext(conn_table(CurrConnId))
		if rc != 0 then
			if (debsw==1) then : print Sep;"Char scan abort\n" : endif
			exitfunc 0
		endif
	endif
endfunc 1

// EVDISCDESC event handler
//==============================================================================
function HandlerDescDisc(cHndl,cUuid,hndl) as integer
	if cUuid!=0 then 
		print Sep;integer.d'ScanDesc;Sep;"DESC";Sep;
		//print " cHndl=";cHndl
		print " dscUuid=";integer.h'cUuid;" dscHndl=";hndl;"\n"
	endif
	IF hndl == 0 THEN
		if (debsw==1) then : PRINT Sep;"Descriptor Scan complete\n" : endif
		EXITFUNC 0
	ELSE
		rc = BleDiscDescNext(cHndl)
		IF rc != 0 THEN
			if (debsw==1) then : PRINT Sep;"Descriptor scan abort\n" : endif
			EXITFUNC 0
		ENDIF
	ENDIF
endfunc 1

// Paraller work handler
//==============================================================================
function ParallelHandler()
	select ParalHandlWork
		case 1 //adv parsing
			dim size,type,beacondev,beacondev$,advmsg$,localname$,rsi,phy,phy$,advchan,ndisc
			advmsg$=adv_table$[advpars_cnt]
			if strlen(advmsg$)>0 then
				if (debsw==1) then : print "dta=";advmsg$;"\n" : endif
				while strlen(advmsg$)!=0
					size=strgetchr(advmsg$,0)
					if (debsw==1) then : print "size=";size : endif
					type=strgetchr(advmsg$,1)
					if (debsw==1) then : print " type=";type;"\n" : endif
					if type==9 then : localname$=mid$(advmsg$,2,size-1) : endif
					if type==255 then : beacondev$=mid$(advmsg$,2,2) : endif
					if type==64 then
						if (debsw==1) then : print "additions "; strhexize$(advmsg$);"\n" : endif
						rsi=strgetchr(advmsg$,2)
						phy=strgetchr(advmsg$,3)
						advchan=strgetchr(advmsg$,4)
						ndisc=strgetchr(advmsg$,5)
					endif
					strshiftleft(advmsg$,size+1)
				endwhile
				if strlen(localname$)==0 then : localname$="NULL" : endif
				if strlen(beacondev$)!=0 then
					rc=BleDecodeS16(beacondev$,beacondev,0)
					if (debsw==1) then : print Sep;"beac=";strhexize$(beacondev$);" (";beacondev;")\n" : endif
					select beacondev
						case AdvTypeMicrosoft
							beacondev$=DevTypeMicrosoft
							break
						case AdvTypeApple
							beacondev$=DevTypeApple
						case AdvTypeHuami
							beacondev$=DevTypeHuami
						case else
							dim half1,half2
							half1=strgetchr(beacondev$,0)
							half2=strgetchr(beacondev$,1)
							rc=strsetchr(beacondev$,half1,1)
							rc=strsetchr(beacondev$,half2,0)
							beacondev$=DevTypeUnknw+"("+ strhexize$(beacondev$)+")"
					endselect
				else : beacondev$="NULL"
				endif
				if phy==BLE_1M_PHY then : phy$="BL4" : else : phy$="BL5" : endif
				advpars_table$[advpars_cnt]=localname$+Sep+beacondev$
				//sprint #advpars_table$[advpars_cnt],advpars_table$[advpars_cnt];integer.d'rsi
				print Sep;integer.d'ScanDev;Sep;phy$;" device â„–";advpars_cnt;Sep; strhexize$(addr_table$[advpars_cnt])					
				print Sep;advpars_table$[advpars_cnt];Sep;"RSSI=-";integer.d'rsi;"\n"
				type=0 : size=0 : advpars_cnt=advpars_cnt+1
			endif
			break
		case 2 //send test string faster as can after last send
			data_table$[PrevConnId]=TestStr
			if sendcount<kbytes-1 then
				do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
				until rc==0
				sendcount=sendcount+1
				if (debsw==1) then : print sendcount;" send\n" : endif
			else
				sendcount=0
				SendTestFlag=0
				TimerCancel(0)
			endif
			break
		case else
	endselect
endfunc 1

// Function for parsing commands
//-------------------------------------------------------------------------------
sub CommandParser(CmdNum)
	select CmdNum
		//-------------------------------------------------------------------------------
		case Help
			print Sep;integer.d'CmdNum;Sep;"List of supported commands:\n"
			dim j
			for j=0 to NumCmnds-1 : print " (";integer.d'j;Sep;HelpTable$[j];"\n" : next
			break
		//-------------------------------------------------------------------------------
		case ScanDev
			dim sphy, n
			for n=0 to device_addr_overall-1
				if conn_table[n]==0 then //reinit all tables except connected devices
					addr_table$[n]=""
					data_table$[n]=""
					adv_table$[n]=""
					advpars_table$[n]=""
					dev_cnt=0
				endif
				msg_cnt[n]=0
			next
			if BLE_PHY==BLE_CODED_PHY then : sphy=2 : else : sphy=1 : endif
			rc = BleScanStartEx(time_to_scan,sphy,"",0)
			if rc == 0 then
				print Sep;integer.d'ScanDev;Sep;"Scan started\n"
				ParalHandlWork=1
				TimerStart(0,500,1)
			else 
				print Sep;integer.d'ScanDev;Sep;"Scan failed with error: ";integer.h'rc;"\n"
			endif
			break
		//-------------------------------------------------------------------------------
		case StopScanDev
			rc = BleScanStop()
			TimerCancel(0)
			advpars_cnt=0
			if (SysInfo(2016)!=1)||(SysInfo(2016)!=24) THEN 
				PRINT Sep;integer.d'StopScanDev;Sep;"Scan stopped\n"
				rc = BleScanFlush()
			endif
			print Sep;integer.d'StopScanDev;Sep;dev_cnt;" device in table: \n"
			dim i
			for i=0 to device_addr_overall-1
				if (strlen(addr_table$[i])==0) then : break : endif
				print Sep;integer.d'StopScanDev;Sep;i;Sep; strhexize$(addr_table$[i]);Sep;advpars_table$[i];Sep;"MSGS=";msg_cnt[i];"\n"
			next
			break
		//-------------------------------------------------------------------------------
		case ConnToDev
			ad_from_table=str_to_id()
			if ad_from_table==-1 then : break : endif
			if ad_from_table>device_addr_overall then
				print Sep;integer.d'ConnToDev;Sep;"Id bigger then max: ";integer.d'device_addr_overall;"\n"
				break
			endif
			if strlen(addr_table$[ad_from_table])<1 then
				print Sep;integer.d'ConnToDev;Sep;"Address id not exist in table\n"
				break
			else
				rc=CheckConnId(ConnToDev,ad_from_table)
				if rc>-1 then
					dim cphy
					if BLE_PHY==BLE_CODED_PHY then : cphy=1 : else : cphy=0 : endif
					rc = BleConnectExtended(addr_table$[ad_from_table],5000,minConnInterval,maxConnInterval,5000000,cphy,0)
					if rc == 0 then
						print Sep;integer.d'ConnToDev;Sep;"Connecting to ";strhexize$(addr_table$[ad_from_table]);" ...\n"
					else
						print Sep;integer.d'ConnToDev;Sep;"Unable to connect, error: ";integer.h'rc;"\n"
					endif
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case ScanSvcChar
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(ScanSvcChar,CurrConnId)
			if rc>-1 then
				print Sep;integer.d'ScanSvcChar;Sep;"Start scanning services and chars:\n"
				rc=BleDiscServiceFirst(conn_table(CurrConnId),0,0)
				if rc==0 then : WAITEVENT : endif
				print Sep;integer.d'ScanSvcChar;Sep;"All service & char finded\n"
			endif
			break
		//-------------------------------------------------------------------------------
		case ScanDesc
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(ScanDesc,CurrConnId)
			if rc>-1 then
				rc=str_to_id()
				if rc>-1 then
					print Sep;integer.d'ScanDesc;Sep;"Start scanning descriptors:\n"
					rc = BleDiscDescFirst(conn_table(CurrConnId),0,rc)
					if rc==0 then : WAITEVENT : endif
					print Sep;integer.d'ScanDesc;Sep;"All descriptors finded\n"
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case SetupSendSvc
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(SetupSendSvc,CurrConnId)
			if rc>-1 then
				rc=str_to_id()
				if rc>-1 then
					RxHandle=rc
					rc=str_to_id()
					if rc>-1 then
						TXHandle=rc
						rc=str_to_id()
						if rc>-1 then
							TXCCCDHandle=rc
							print Sep;integer.d'SetupSendSvc;Sep;"RX svc set:";RxHandle
							print ", TX svc set:";TXHandle
							dim CCCD_ON$:CCCD_ON$ = "\01\00"
							rc = BLEGATTCWRITE(conn_table(CurrConnId), TXCCCDHandle, CCCD_ON$)
							if rc==0 then : print ", CCCD for:";TXCCCDHandle;" enabled\n" : endif
						endif
					endif
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case SendToDev
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(SendToDev,CurrConnId)
			if rc>-1 then
				data_table$[CurrConnId]=urx$
				if (CurrConnId==PrevConnId) then
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				else
					if (strlen(data_table$[PrevConnId])!=0) then
						if (debsw==1) then : print Sep;"Old conn send\n" : endif
						do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
						until rc==0
					else 
						if (debsw==1) then : print Sep;"New conn send\n" : endif
						do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
						until rc==0		 
					endif
					PrevConnId=CurrConnId
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case SendTestData
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			SendTestFlag=1
			rc=CheckConnId(SendTestData,CurrConnId)
			if rc>-1 then
				kbytes=str_to_id()
				if (kbytes>-1) then
					data_table$[CurrConnId]=TestStr
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case DisConn
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(DisConn,CurrConnId)
			if rc>-1 then
				rc = BleDisconnect(conn_table(CurrConnId))
				if rc==0 then : print Sep;integer.d'DisConn;Sep;"Close conncection: ";conn_table(CurrConnId);"\n"
				else : print Sep;integer.d'DisConn;Sep;"Unable to close conncection, error: ";integer.h'rc;"\n"
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case DebudSwitch	
			rc=str_to_id()
			if rc==-1 then : break : endif
			print Sep;integer.d'DebudSwitch;Sep;"Debug "
			select rc
				case 0
					debsw=rc
					print "off\n"
				case 1 
					debsw=rc
					print "on\n"
				case 2
					debsw=rc
					print "msg timer on\n"
				case else
					print "available states 0/1/2\n"
			endselect
			break
		//-------------------------------------------------------------------------------
		case ModemParams
			dim fw,w,x,y,z
			fw=SysInfo(3)
			w=fw>>24
			fw=fw-(w<<24)
			x=fw>>18
			fw=fw-(x<<18)
			y=fw>>6
			fw=fw-(y<<6)
			z=fw
			print " FW version=";w;".";x;".";y;".";z;"\n"
			print " Tx power="; SysInfo(2008);"\n"
			print " PHY protocol="
			select BLE_PHY
				case BLE_1M_PHY
					print "BL4 1M\n"
				case BLE_2M_PHY
					print "BL5 2\n"
				case BLE_CODED_PHY
					print "BL5 CODED\n"
				case else
			endselect
			print " Flash DATA total="; SysInfo(601);" free="; SysInfo(602);"\n"
			print " Flash FAT total="; SysInfo(611);" free="; SysInfo(612);"\n"
			print " Flash NV total="; SysInfo(631);" free="; SysInfo(632);"\n"
			print " Stack size="; SysInfo(2022);" in use="; SysInfo(2021);"\n"
			print " Heap size="; SysInfo(2023);" in use="; SysInfo(2025);"\n"
			print " Timer resolution="; SysInfo(2002);" tick="; SysInfo(2004);"\n"
			print " Radio activity="
			select SysInfo(2016)
				case 0
					print "None\n"
				case 1
					print "Advertising\n"
				case 2
					print "Connected as slave\n"
				case 4
					print "Initaiting a connection\n"
				case 8
					print "Scanning for adverts\n"
				case 16
					print "Connected as master\n"
				case 24
					print "Scan while connected as master\n"
				case else
					print SysInfo(2016);"\n"
			endselect
			dim t as float
			t=SysInfo(2024)
			t=t/10.0
			print " Temperature=";float.f't;"\n"
			dim v as float
			v=SysInfo(2026)
			v=v/1000.0
			print " Supply voltage=";float.f'v;"\n"
			print " FWStartTime="; SysInfo(2080);"ms\n"
			dim pcon,centcon
			rc=NvCfgKeyGet(205,pcon)
			print " AvailNumPeriphConn=";pcon;"\n"
			rc=NvCfgKeyGet(206,centcon)
			print " AvailNumCentrConn=";centcon;"\n"
			break
		//-------------------------------------------------------------------------------
		case ActiveConn
			print Sep;integer.d'ActiveConn;Sep;"Number of active connections: ";conn_cnt;"\n"
			dim c
			for c=0 to device_addr_overall-1
				if conn_table[c]>0 then
					print Sep;integer.d'ActiveConn;Sep;c;Sep; strhexize$(addr_table$[c]);Sep;adv_table$[c];"\n"
				endif
			next
		//-------------------------------------------------------------------------------
		case ChangePhy
			rc=str_to_id()
			if rc==-1 then : break : endif
			print Sep;"PHY "
			select rc
				case 1
					BLE_PHY=BLE_1M_PHY
					SCAN_TYPE=BLE_NORMAL_SCANNING
					HIGH_BANDWIDTH=0
					print "BL4 1M mode\n"
				case 2
					BLE_PHY=BLE_2M_PHY
					print "BL5 2M mode\n"
				case 4
					BLE_PHY=BLE_CODED_PHY
					SCAN_TYPE=BLE_EXTENDED_SCANNING
					HIGH_BANDWIDTH=1
					print "BL5 CODED mode\n"
				case else
					print "available states 1/2/4\n"
			endselect
			rc = BleScanStop() 
			rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HIGH_BANDWIDTH)
			rc = BleScanConfig(4,BLE_PHY)
			rc = BleScanConfig(5,SCAN_TYPE)
			// Set connection PHYs to CODED PHY, enable extended connection
			rc = BleConnectConfig(10,BLE_PHY)
			rc = BleConnectConfig(11,SCAN_TYPE)
			//rc = BlePhySet(ConnectionID, BLE_PHY, BLE_PHY, 0)
			break
		//-------------------------------------------------------------------------------
		case ChangePower
			rc=str_to_id()
			if rc==-1 then : break : endif
			select rc
				case -8
				break
				case -6
				break
				case -4
				break
				case -2
				break
				case 0
				break
				case 2
				break
				case 4
				break
				case 6
				break
				case 8
				break
				case else
					rc=-1
			endselect
			if rc==-1 then : print Sep;integer.d'ChangePower;Sep;"Available states (+/-) 0/2/4/6/8\n"
			else : rc = BleTxPowerSet(rc) : print Sep;integer.d'ChangePower;Sep;"Tx power="; SysInfo(2008);"\n"
			endif
			break
		//-------------------------------------------------------------------------------
		case StopApp
			STOP
			break
		//-------------------------------------------------------------------------------
		case ResetMdm
			Reset(0)
			break
		//-------------------------------------------------------------------------------
		case else
			PRINT Sep;"Unknw cmnd. HEXECHO=";strhexize$(urx$);"\n"
	endselect
endsub	
