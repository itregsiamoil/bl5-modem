//Commands
#define NumCmnds			15
#define Help				0
#define ScanDev				1
#define StopScanDev			2
#define ConnToDev			3
#define ScanSvcChar			4
#define ScanDesc			5
#define SetupSendSvc		6
#define SendToDev			7
#define SendTestData		8
#define DisConn				9
#define DebudSwitch			10
#define ModemParams			11
#define StopApp				12
#define ChangePhy			13
#define ResetMdm			14
dim HelpTable$[NumCmnds]
HelpTable$[0]=" (0-) *print all comands list"
HelpTable$[1]=" (1-) *unlimit scan BLE devices"
HelpTable$[2]=" (2-) *stop scan BLE devices"
HelpTable$[3]=" (3-add-) *connect to selected device from table"
HelpTable$[4]=" (4-conn-) *create list of services and characteristics from device"
HelpTable$[5]=" (5-conn-srv-) *create list of descriptors from select service"
HelpTable$[6]=" (6-conn-rx-tx-ntf-) *setup RX-TX-CCCD to chat with selected device from table"
HelpTable$[7]=" (7-conn-data-) *send data to selected device from table"
HelpTable$[8]=" (8-conn-n-) *send test string (100*n bytes) to selected device from table"
HelpTable$[9]=" (9-conn-) *disconnect from selected device from table"
HelpTable$[10]=" (10-0/1/2-) *0-off debug, 1-on debug, 2-measure time between msgs"
HelpTable$[11]=" (11-) *show modem parameters"
HelpTable$[12]=" (12-) *exit app to AT mode, RESUME to continue run app"
HelpTable$[13]=" (13-1/2/4-) *change modem phy level 1-1M BL4, 2-2M BL5, 4-CODED BL5"
HelpTable$[14]=" (14-) *reset modem"

//==============================================================================
// Parsing command parametr
//==============================================================================
function str_to_id()
	dim input_param$,param,SepPos
	SepPos=StrPos(urx$,Separator$,0)
	if (SepPos==-1) then 
		param=-1
		print "-Cmnd separator '-' not found\n"
	else
		input_param$=Left$(urx$,SepPos)
		param=strvaldec(input_param$)
		StrShiftLeft(urx$,SepPos+1)
	endif
endfunc param

//==============================================================================
// Check connection id in table
//==============================================================================
function CheckConnId(cmnd,id)
	dim param
	if (id<device_addr_overall) then
		if conn_table[id]>1 then : param=id
		else : param=-1 : print "-";integer.d'cmnd;"-Connection id not exist in table\n"
		endif
	else
		param=-1
		print "-";integer.d'cmnd;"-Id bigger then max: ";integer.d'device_addr_overall;"\n"
	endif
endfunc param

//==============================================================================
// Send data through BLE
//==============================================================================
function SendToBle(ConnId,data$)
	DIM DataToSend$
	IF BufferState == 0 then				
		DataToSend$ = Left$(data$, nAttributeLength) // Ensure that we only read nAttribureLength
		rc = BLEGATTCWRITECMD(ConnId, RXHandle, DataToSend$)
		select rc
			case 0
				StrShiftLeft(data$,nAttributeLength)
				if (debsw==1) then : print "-Succs send to char:";RXHandle;"\n" : endif
			case 24614
				print "-Connection Id not correct, rc=";integer.h'rc;"\n"
				exitfunc 2
			case 24662
				print "-Data to send is empty, rc=";integer.h'rc;"\n"
				exitfunc 0
			case else
				BufferState = 1
				if (debsw==1) then : print "-Ble send error! rc=";integer.h'rc;"\n" : endif
		endselect
	else 
		if (debsw==1) then : print "-Buf full\n" : endif
		exitfunc 0 
	endif
	if strlen(data$)==0 then
		if (debsw==1) then : print "-Buff conn: ";ConnId;" empty\n" : endif
		exitfunc 0 
	endif
endfunc 1

//==============================================================================
// Send test string 
//==============================================================================
function SendKbytes ()
	data_table$[PrevConnId]=TestStr$
	if sendcount<kbytes-1 then
		do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
		until rc==0
		sendcount=sendcount+1
		if (debsw==1) then : print sendcount;" send\n" : endif
	else
		sendcount=0
		SendTestFlag=0
		TimerCancel(0)
		endif
endfunc 1

//==============================================================================
// EVDISCSVC event handler
//==============================================================================
function HndlrPrimSvc(cHndl,svcUuid,sHndl,eHndl) as integer
	if cHndl!=PrevHndl then : print "-";integer.d'ScanSvcChar;"-Connection: ";cHndl;"\n" : endif
	print "-";integer.d'ScanSvcChar;"-SVC-";integer.h'svcUuid;" handler=";sHndl;" to ";eHndl;"\n"
	PrevHndl=cHndl
	if sHndl==0 then 
		if (debsw==1) then : print "-Scan svc complete\n" : endif
		exitfunc 0
	else
		rc=BleDiscCharFirst(cHndl,0,sHndl,eHndl)
		if rc!=0 then 
			if (debsw==1) then : print "-Scan char abort\n" : endif
		endif
	endif
endfunc 1

//==============================================================================
// EVDISCCHAR event handler
//==============================================================================
function HandlerCharDisc(cHndl,cUuid,cProp,hVal,isUuid) as integer
	if cUuid!=0 then 
		print "-";integer.d'ScanSvcChar;"-CHAR-";integer.h'cUuid
		select cProp
			case 2
				print "(r)"
			case 4
				print "(w-w/o-resp)"
			case 8
				print "(w)"
			case 10
				print "(r/w)"	
			case 16
				print "(n-w-cccd)"
			case 32
				print "(i-w-cccd)"
			case 48
				print "(n/i-w-cccd)"
			case else
				print "(";cProp;")"
		endselect
		print" handler=";hVal;"\n"
	endif
	IF hVal == 0 THEN
		if (debsw==1) then : PRINT "-Char scan complete\n" : endif
		rc=BleDiscServiceNext(cHndl)
		if rc!=0 then 
			if (debsw==1) then : print "-Scan svc abort\n" : endif
			exitfunc 0
		endif
		//EXITFUNC 0
	ELSE
		rc = BleDiscCharNext(conn_table(CurrConnId))
		IF rc != 0 THEN
			if (debsw==1) then : PRINT "-Char scan abort\n" : endif
			EXITFUNC 0
		ENDIF
	ENDIF
endfunc 1

//==============================================================================
// EVDISCDESC event handler
//==============================================================================
function HandlerDescDisc(cHndl,cUuid,hndl) as integer
	if cUuid!=0 then 
		print "-";integer.d'ScanDesc;"-DESC-"
		//print " cHndl=";cHndl
		print " dscUuid=";integer.h'cUuid;" dscHndl=";hndl;"\n"
	endif
	IF hndl == 0 THEN
		if (debsw==1) then : PRINT "-Descriptor Scan complete\n" : endif
		EXITFUNC 0
	ELSE
		rc = BleDiscDescNext(cHndl)
		IF rc != 0 THEN
			if (debsw==1) then : PRINT "-Descriptor scan abort\n" : endif
			EXITFUNC 0
		ENDIF
	ENDIF
endfunc 1

//-------------------------------------------------------------------------------
// Function for parsing commands
//-------------------------------------------------------------------------------
sub CommandParser(CmdNum)
	select CmdNum
		//-------------------------------------------------------------------------------
		case Help
			print "-";integer.d'CmdNum;"-List of supported commands:\n"
			dim j
			for j=0 to NumCmnds-1 : print HelpTable$[j];"\n" : next
		//-------------------------------------------------------------------------------
		case ScanDev
			dim sphy
			if BLE_PHY==BLE_CODED_PHY then : sphy=2 : else : sphy=1 : endif
			rc = BleScanStartEx(time_to_scan,sphy,"",0)
			if rc == 0 then
				print "-";integer.d'ScanDev;"-Scan started\n"
			else 
				print "-";integer.d'ScanDev;"-Scan failed with error: ";integer.h'rc;"\n"
			endif
		//-------------------------------------------------------------------------------
		case StopScanDev
			rc = BleScanStop() 
			if SysInfo(2016)==0 THEN 
				PRINT "-";integer.d'StopScanDev;"-Scan stopped\n"
				//rc = BleScanFlush()
			endif
			print "-";integer.d'StopScanDev;"-";dev_cnt;" device in table: \n"
			dim i
			for i=0 to dev_cnt-1
				print "-";integer.d'StopScanDev;"-";i;"-"; strhexize$(addr_table$[i]);"-";msg_cnt[i];"-";adv_table$[i];"\n"
				msg_cnt[i]=1
				if (strlen(addr_table$[i])==0) then : break : endif
			next
		//-------------------------------------------------------------------------------
		case ConnToDev
			ad_from_table=str_to_id()
			if ad_from_table==-1 then : break : endif
			if strlen(addr_table$[ad_from_table])<1 then : print "-Address id not exist in table\n" : break
			else
				rc=CheckConnId(ConnToDev,ad_from_table)
				if rc==-1 then
					dim cphy
					if BLE_PHY==BLE_CODED_PHY then : cphy=1 : endif
					rc = BleConnectExtended(addr_table$[ad_from_table],5000,minConnInterval,maxConnInterval,5000000,cphy,0)
					if rc == 0 then
						dim conn_addr$:conn_addr$=strhexize$(addr_table$[ad_from_table])
						print "-";integer.d'ConnToDev;"-Connecting to ";conn_addr$;" ...\n"
					else
						print "-";integer.d'ConnToDev;"-Unable to connect, error: ";integer.h'rc;"\n"
					endif
				else : print "-";integer.d'ConnToDev;"-Connection already exist\n"
				endif
			endif
		//-------------------------------------------------------------------------------
		case ScanSvcChar
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(ScanSvcChar,CurrConnId)
			if rc>-1 then
				print "-";integer.d'ScanSvcChar;"-Start scanning services and chars:\n"
				rc=BleDiscServiceFirst(conn_table(CurrConnId),0,0)
				if rc==0 then : WAITEVENT : endif
				print "-";integer.d'ScanSvcChar;"-All service & char finded\n"
			endif
		//-------------------------------------------------------------------------------
		case ScanDesc
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(ScanDesc,CurrConnId)
			if rc>-1 then
				rc=str_to_id()
				if rc>-1 then
					print "-";integer.d'ScanDesc;"-Start scanning descriptors:\n"
					rc = BleDiscDescFirst(conn_table(CurrConnId),0,rc)
					if rc==0 then : WAITEVENT : endif
					print "-";integer.d'ScanDesc;"-All descriptors finded\n"
				endif
			endif
		//-------------------------------------------------------------------------------
		case SetupSendSvc
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(SetupSendSvc,CurrConnId)
			if rc>-1 then
				rc=str_to_id()
				if rc>-1 then
					RxHandle=rc
					rc=str_to_id()
					if rc>-1 then
						TXHandle=rc
						rc=str_to_id()
						if rc>-1 then
							TXCCCDHandle=rc
							print "-";integer.d'SetupSendSvc;"-RX svc set:";RxHandle
							print ", TX svc set:";TXHandle
							dim CCCD_ON$:CCCD_ON$ = "\01\00"
							rc = BLEGATTCWRITE(conn_table(CurrConnId), TXCCCDHandle, CCCD_ON$)
							if rc==0 then : print ", CCCD for:";TXCCCDHandle;" enabled\n" : endif
						endif
					endif
				endif
			endif
		//-------------------------------------------------------------------------------
		case SendToDev
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(SendToDev,CurrConnId)
			if rc>-1 then
				data_table$[CurrConnId]=urx$
				if (CurrConnId==PrevConnId) then					
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				else
					if (strlen(data_table$[PrevConnId])!=0) then
						if (debsw==1) then : print "-Old conn send\n" : endif
						do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
						until rc==0
					else 
						if (debsw==1) then : print "-New conn send\n" : endif
						do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
							// if (rc==2) then 
								// data_table$[CurrConnId]=""
								// break 
							// endif
						until rc==0		 
					endif
					PrevConnId=CurrConnId
				endif
			endif
		//-------------------------------------------------------------------------------
		case SendTestData
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			SendTestFlag=1
			rc=CheckConnId(SendTestData,CurrConnId)
			if rc>-1 then
				kbytes=str_to_id()
				if (kbytes>-1) then
					data_table$[CurrConnId]=TestStr$
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				endif
			endif
		//-------------------------------------------------------------------------------
		case DisConn
			CurrConnId=str_to_id()
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(DisConn,CurrConnId)
			if rc>-1 then
				rc = BleDisconnect(conn_table(CurrConnId))
				if rc==0 then : print "-";integer.d'DisConn;"-Close conncection: ";conn_table(CurrConnId);"\n"
				else : print "-";integer.d'DisConn;"-Unable to close conncection, error: ";integer.h'rc;"\n"
				endif
			endif
		//-------------------------------------------------------------------------------
		case DebudSwitch	
			rc=str_to_id()
			if rc==-1 then : break : endif
			select rc
				case 0
					debsw=rc
					print "-";integer.d'DebudSwitch;"-Debug off\n"
				case 1 
					debsw=rc
					print "-";integer.d'DebudSwitch;"-Debug on\n"
				case 2
					debsw=rc
					print "-";integer.d'DebudSwitch;"-Debug msg timer on\n"
				case else
					//print "-";integer.d'DebudSwitch;"-Available states 0/1/2\n"
			endselect
		//-------------------------------------------------------------------------------
		case ModemParams
			dim fw,w,x,y,z
			fw=SysInfo(3)
			w=fw>>24
			fw=fw-(w<<24)
			x=fw>>18
			fw=fw-(x<<18)
			y=fw>>6
			fw=fw-(y<<6)
			z=fw
			print " FW version=";w;".";x;".";y;".";z;"\n"
			print " Tx power="; SysInfo(2008);"\n"
			select BLE_PHY
				case BLE_1M_PHY
					print " PHY=BLE_1M_PHY\n"
				case BLE_2M_PHY
					print " PHY=BLE_2M_PHY\n"
				case BLE_CODED_PHY
					print " PHY=BLE_CODED_PHY\n"
				case else
			endselect
			print " Flash DATA total="; SysInfo(601);" free="; SysInfo(602);"\n"
			print " Flash FAT total="; SysInfo(611);" free="; SysInfo(612);"\n"
			print " Flash NV total="; SysInfo(631);" free="; SysInfo(632);"\n"
			print " Stack size="; SysInfo(2022);" in use="; SysInfo(2021);"\n"
			print " Heap size="; SysInfo(2023);" in use="; SysInfo(2025);"\n"
			print " Timer resolution="; SysInfo(2002);" tick="; SysInfo(2004);"\n"
			print " Radio activity="
			select SysInfo(2016)
				case 0
					print "None\n"
				case 1
					print "Advertising\n"
				case 2
					print "Connected as slave\n"
				case 4
					print "Initaiting a connection\n"
				case 8
					print "Scanning for adverts\n"
				case 16
					print "Connected as master\n"
				case 24
					print "Scan while connected as master\n"
				case else
					print SysInfo(2016);"\n"
			endselect
			dim t as float
			t=SysInfo(2024)
			t=t/10.0
			print " Temperature=";float.f't;"\n"
			dim v as float
			v=SysInfo(2026)
			v=v/1000.0
			print " Supply voltage=";float.f'v;"\n"
			print " FWStartTime="; SysInfo(2080);"ms\n"
		//-------------------------------------------------------------------------------
		case StopApp
			STOP
		//-------------------------------------------------------------------------------
		case ChangePhy
			rc=str_to_id()
			if rc==-1 then : break : endif
			select rc
				case 1
					BLE_PHY=BLE_1M_PHY
					SCAN_TYPE=BLE_NORMAL_SCANNING
					HIGH_BANDWIDTH=0
					print "-PHY changed to LE 1M\n"
				case 2
					BLE_PHY=BLE_2M_PHY
					print "-PHY changed to LE 2M\n"
				case 4
					BLE_PHY=BLE_CODED_PHY
					SCAN_TYPE=BLE_EXTENDED_SCANNING
					HIGH_BANDWIDTH=1
					print "-PHY changed to LE CODED PHY\n"
				case else
			endselect
			rc = BleScanStop() 
			rc = BleScanConfig(4,BLE_PHY)
			rc = BleScanConfig(5,SCAN_TYPE)
			// Set connection PHYs to CODED PHY, enable extended connection
			rc = BleConnectConfig(10,BLE_PHY)
			rc = BleConnectConfig(11,SCAN_TYPE)
			rc = BlePhySet(ConnectionID, BLE_PHY, BLE_PHY, 0)
		//-------------------------------------------------------------------------------
		case ResetMdm
			Reset(0)
		//-------------------------------------------------------------------------------
		case else
			PRINT "-Unknown cmnd. ECHO=";strhexize$(urx$);"\n"
	endselect
endsub	
