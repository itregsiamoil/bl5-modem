// Command list
//-------------------------------------------------------------------------------
#define NumCmnds			13
dim HelpTable$[NumCmnds]
#define Help				0
#define ScanDev				1
#define StopScanDev			2
#define ConnToDev			3
#define ScanSvcChrDesc		4
#define ReadAtt				5
#define SetupSendSvc		6
#define SendToDev			7
#define SendTestData		8
#define DisConn				9
#define ModemParams			10
#define StopApp				11
#define ResetMdm			12
HelpTable$[Help]=") print all comands list"
HelpTable$[ScanDev]=") 20sec scan BLE devices"
HelpTable$[StopScanDev]=") stop scan BLE devices"
HelpTable$[ConnToDev]="add"+Sep+") connect to selected device from table"
HelpTable$[ScanSvcChrDesc]="conn"+Sep+") create list of services/characteristics/descriptors from device"
HelpTable$[ReadAtt]="conn"+Sep+"hndl"+Sep+") read data from handler"
HelpTable$[SetupSendSvc]="conn"+Sep+"rx"+Sep+"tx"+Sep+") setup RX-TX characteristics to chat with selected device"
HelpTable$[SendToDev]="conn"+Sep+"data"+Sep+") send data to selected device from table"
HelpTable$[SendTestData]="conn"+Sep+"n"+Sep+") send test string (100*n bytes) to selected device from table"
HelpTable$[DisConn]="conn"+Sep+") disconnect from selected device from table"
HelpTable$[ModemParams]="cmnd"+Sep+") show(0) or change(1/2/3/4/5) modem parameters"
HelpTable$[StopApp]=") exit app to AT mode, RESUME to continue run app"
HelpTable$[ResetMdm]=") reset modem"

// Parsing command parametr
//==============================================================================
function str_to_id(buf$,cleaning)
	dim input_param$,SepPos,sepstr$
	if (debsw==1) then : print "Buf:";buf$;"\n" : endif
	sepstr$=Sep
	SepPos=StrPos(buf$,sepstr$,0)
	temp=0
	if (SepPos==-1) then 
		temp=-1
		print Sep;"Cmnd separator '";Sep;"' not found\n"
	else
		input_param$=Left$(buf$,SepPos)
		temp=strvaldec(input_param$)
		if (cleaning==1) then : StrShiftLeft(buf$,SepPos+1) : endif
	endif
endfunc temp

// Find handler
//==============================================================================
function find_handler(buf$)
	dim handler
	temp$="H:"
	handler=StrPos(buf$,temp$,7)
	temp$=mid$(buf$,handler+2,3)
	handler=strvaldec(temp$)
endfunc handler

// Check connection id in table
//==============================================================================
function CheckConnId(cmnd,id)
	temp=0
	if (id<device_addr_overall) then
		if conn_table[id]>1 then
			if cmnd==ConnToDev then		
				temp=-1
				print Sep;integer.d'ConnToDev;Sep;"Connection already exist\n"
			else : temp=id
			endif
		else
			if cmnd==ConnToDev then
				temp=1
				print Sep;cmnd;Sep;"First connection\n"
			else
				temp=-1
				print Sep;cmnd;Sep;"Connection id not exist in table\n"
			endif
		endif
	else
		temp=-1
		print Sep;cmnd;Sep;"Id bigger then max: ";integer.d'device_addr_overall;"\n"
	endif
endfunc temp

// Send data through BLE
//==============================================================================
function SendToBle(ConnId,data$)
	dim DataToSend$
	if BufferState == 0 then				
		DataToSend$ = Left$(data$, nAttributeLength) // Ensure that we only read nAttribureLength
		rc = BLEGATTCWRITECMD(ConnId, RXHandle, DataToSend$)
		select rc
			case 0
				StrShiftLeft(data$,nAttributeLength)
				if (debsw==1) then : print Sep;"Succs send to char:";RXHandle;"\n" : endif
			case 24614
				print Sep;integer.d'SendToDev;Sep;"Connection Id not correct, rc=";integer.h'rc;"\n"
				exitfunc 2
			case 24662
				print Sep;integer.d'SendToDev;Sep;"Data to send is empty or not HEX, rc=";integer.h'rc;"\n"
				exitfunc 0
			case else
				BufferState = 1
				if (debsw==1) then : print Sep;"Ble send error! rc=";integer.h'rc;"\n" : endif
		endselect
	else 
		if (debsw==1) then : print Sep;"Buf full\n" : endif
		exitfunc 0 
	endif
	if strlen(data$)==0 then
		if (debsw==1) then : print Sep;"Buff conn: ";ConnId;" empty\n" : endif
		exitfunc 0 
	endif
endfunc 1

// EVDISCSVC event handler
//==============================================================================
function HndlrPrimSvc(cHndl,svcUuid,sHndl,eHndl) as integer
	if svcUuid!=0 then
		sprint #uuid$,integer.h'svcUuid
		StrShiftLeft(uuid$,4)
		sprint #temp$,"SVC:";uuid$;" H:";sHndl;"-";eHndl
		svc_table$(svc_cnt)=temp$
		svc_cnt=svc_cnt+1
	endif
	if sHndl==0 then 
		if (debsw==1) then : print Sep;"Scan svc complete\n" : endif
		exitfunc 0
	else
		rc=BleDiscServiceNext(cHndl)
		if rc!=0 then 
			if (debsw==1) then : print Sep;"Scan svc abort\n" : endif
			exitfunc 0
		endif
	endif
endfunc 1

// EVDISCCHAR event handler
//==============================================================================
function HandlerCharDisc(cHndl,cUuid,cProp,hVal,isUuid) as integer
	if cUuid!=0 then
		dim prop$
		select cProp
			case 2
				prop$="rd" : break
			case 4
				prop$="wr-wo-resp" : break
			case 8
				prop$="wr" : break
			case 10
				prop$="rd/wr" : break
			case 16
				prop$="nt-w-cccd" : break
			case 18
				prop$="rd/nt-w-cccd" : break
			case 20
				prop$="wr-wo-resp/nt-w-cccd" : break
			case 22
				prop$="rd/wr-wo-resp/nt-w-cccd" : break
			case 24
				prop$="wr/nt-w-cccd" : break
			case 26
				prop$="rd/wr/nt-w-cccd" : break
			case 32
				prop$="in-w-cccd" : break
			case 48
				prop$="nt/in-w-cccd" : break
			case else
				sprint #prop$,cProp
		endselect
		sprint #uuid$,integer.h'cUuid
		StrShiftLeft(uuid$,4)
		sprint #temp$,"CHR:";uuid$;"(";prop$;")";" H:";hVal
		chr_table$(char_cnt)=temp$
		char_cnt=char_cnt+1
	endif
	if hVal == 0 then
		if (debsw==1) then : print Sep;"Char scan complete\n" : endif
		exitfunc 0
	else
		rc = BleDiscCharNext(cHndl)
		if rc != 0 then
			if (debsw==1) then : print Sep;"Char scan abort\n" : endif
			exitfunc 0
		endif
	endif
endfunc 1

// EVDISCDESC event handler
//==============================================================================
function HandlerDescDisc(cHndl,cUuid,hndl) as integer
	if cUuid!=0 then 
		sprint #uuid$,integer.h'cUuid
		StrShiftLeft(uuid$,4)
		sprint #temp$,"DES:";uuid$;" H:";hndl
		desc_table$(desc_cnt)=temp$
		desc_cnt=desc_cnt+1
	endif
	if hndl == 0 then
		if (debsw==1) then : print Sep;"Descriptor Scan complete\n" : endif
		exitfunc 0
	else
		rc = BleDiscDescNext(cHndl)
		if rc != 0 then
			if (debsw==1) then : print Sep;"Descriptor scan abort\n" : endif
			exitfunc 0
		endif
	endif
endfunc 1

// Paraller work handler
//==============================================================================
function ParallelHandler()
	select ParalHandlWork
		case 1 //adv parsing
			dim size,type,beacondev,beacondev$,advmsg$,localname$,rsi,phy,phy$,advchan,ndisc
			advmsg$=adv_table$[advpars_cnt]
			if strlen(advmsg$)>0 then
				if (debsw==1) then : print "dta=";advmsg$;"\n" : endif
				while strlen(advmsg$)!=0
					size=strgetchr(advmsg$,0)
					if (debsw==1) then : print "size=";size : endif
					type=strgetchr(advmsg$,1)
					if (debsw==1) then : print " type=";type;"\n" : endif
					if type==9 then : localname$=mid$(advmsg$,2,size-1) : endif
					if type==255 then : beacondev$=mid$(advmsg$,2,2) : endif
					if type==64 then
						if (debsw==1) then : print "additions "; strhexize$(advmsg$);"\n" : endif
						rsi=strgetchr(advmsg$,2)
						phy=strgetchr(advmsg$,3)
						advchan=strgetchr(advmsg$,4)
						ndisc=strgetchr(advmsg$,5)
					endif
					strshiftleft(advmsg$,size+1)
				endwhile
				if strlen(localname$)==0 then : localname$="NULL" : endif
				if strlen(beacondev$)!=0 then
					rc=BleDecodeS16(beacondev$,beacondev,0)
					if (debsw==1) then : print Sep;"beac=";strhexize$(beacondev$);" (";beacondev;")\n" : endif
					select beacondev
						case AdvTypeMicrosoft
							beacondev$=DevTypeMicrosoft : break
						case AdvTypeApple
							beacondev$=DevTypeApple : break
						case AdvTypeHuami
							beacondev$=DevTypeHuami : break
						case else
							dim half1,half2
							half1=strgetchr(beacondev$,0)
							half2=strgetchr(beacondev$,1)
							rc=strsetchr(beacondev$,half1,1)
							rc=strsetchr(beacondev$,half2,0)
							beacondev$=DevTypeUnknw+"("+ strhexize$(beacondev$)+")"
					endselect
				else : beacondev$="NULL"
				endif
				if phy==BLE_1M_PHY then : phy$="BL4" : else : phy$="BL5" : endif
				advpars_table$[advpars_cnt]=localname$+Sep+beacondev$
				//sprint #advpars_table$[advpars_cnt],advpars_table$[advpars_cnt];integer.d'rsi
				print Sep;integer.d'ScanDev;Sep;phy$;" device â„–";advpars_cnt;Sep; strhexize$(addr_table$[advpars_cnt])					
				print Sep;advpars_table$[advpars_cnt];Sep;"RSSI=-";rsi;"\n"
				type=0 : size=0 : advpars_cnt=advpars_cnt+1
			endif
			break
		case 2 //send test string faster as can after last send
			data_table$[PrevConnId]=TestStr
			if sendcount<kbytes-1 then
				do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
				until rc==0
				sendcount=sendcount+1
				if (debsw==1) then : print sendcount;" send\n" : endif
			else
				sendcount=0
				SendTestFlag=0
				TimerCancel(0)
			endif
			break
		case else
	endselect
endfunc 1

// Function for parsing commands
//-------------------------------------------------------------------------------
sub CommandParser(CmdNum)
	select CmdNum
		//-------------------------------------------------------------------------------
		case Help
			print Sep;integer.d'CmdNum;Sep;"List of supported commands:\n"
			for temp=0 to NumCmnds-1 : print " (";temp;Sep;HelpTable$[temp];"\n" : next
			break
		//-------------------------------------------------------------------------------
		case ScanDev
			dim sphy
			for temp=0 to device_addr_overall-1
				if conn_table[temp]==0 then //reinit all tables except connected devices
					addr_table$[temp]=""
					data_table$[temp]=""
					adv_table$[temp]=""
					advpars_table$[temp]=""
					dev_cnt=0
				endif
				msg_cnt[temp]=0
			next
			if BLE_PHY==BLE_CODED_PHY then : sphy=2 : else : sphy=1 : endif
			rc = BleScanStartEx(time_to_scan,sphy,"",0)
			if rc == 0 then
				print Sep;integer.d'ScanDev;Sep;"Scan started\n"
				ParalHandlWork=1
				TimerStart(0,500,1)
			else 
				print Sep;integer.d'ScanDev;Sep;"Scan failed with error: ";integer.h'rc;"\n"
			endif
			break
		//-------------------------------------------------------------------------------
		case StopScanDev
			rc = BleScanStop()
			TimerCancel(0)
			advpars_cnt=0
			if (SysInfo(2016)!=1)||(SysInfo(2016)!=24) THEN 
				PRINT Sep;integer.d'StopScanDev;Sep;"Scan stopped\n"
				rc = BleScanFlush()
			endif
			print Sep;integer.d'StopScanDev;Sep;dev_cnt;" device in table: \n"
			for temp=0 to device_addr_overall-1
				if (strlen(addr_table$[temp])==0) then : break : endif
				print Sep;integer.d'StopScanDev;Sep;temp;Sep; strhexize$(addr_table$[temp]);Sep;advpars_table$[temp];Sep;"MSGS=";msg_cnt[temp];"\n"
			next
			break
		//-------------------------------------------------------------------------------
		case ConnToDev
			ad_from_table=str_to_id(urx$,1)
			if ad_from_table==-1 then : break : endif
			if ad_from_table>device_addr_overall then
				print Sep;integer.d'ConnToDev;Sep;"Id bigger then max: ";integer.d'device_addr_overall;"\n"
				break
			endif
			if strlen(addr_table$[ad_from_table])<1 then
				print Sep;integer.d'ConnToDev;Sep;"Address id not exist in table\n"
				break
			else
				rc=CheckConnId(ConnToDev,ad_from_table)
				if rc>-1 then
					dim cphy
					if BLE_PHY==BLE_CODED_PHY then : cphy=1 : else : cphy=0 : endif
					rc = BleConnectExtended(addr_table$[ad_from_table],5000,minConnInterval,maxConnInterval,5000000,cphy,0)
					if rc == 0 then
						print Sep;integer.d'ConnToDev;Sep;"Connecting to ";strhexize$(addr_table$[ad_from_table]);" ...\n"
					else
						print Sep;integer.d'ConnToDev;Sep;"Unable to connect, error: ";integer.h'rc;"\n"
					endif
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case ScanSvcChrDesc
			CurrConnId=str_to_id(urx$,1)
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(ScanSvcChrDesc,CurrConnId)
			if rc>-1 then
				for temp=0 to svc_cnt-1
					svc_table$(temp)=""
				next
				for temp=0 to char_cnt-1
					chr_table$(temp)=""
				next
				for temp=0 to desc_cnt-1
					desc_table$(temp)=""
				next
				svc_cnt=0
				char_cnt=0
				desc_cnt=0
				print Sep;integer.d'ScanSvcChrDesc;Sep;"Start scanning services and chars:\n"
				rc=BleDiscServiceFirst(conn_table(CurrConnId),0,0)
				if rc==0 then : WAITEVENT : endif
				rc=BleDiscCharFirst(conn_table(CurrConnId),0,0,65535)
				if rc==0 then : WAITEVENT : endif
				for temp=0 to char_cnt-1
					rc=find_handler(chr_table$(temp))
					rc = BleDiscDescFirst(conn_table(CurrConnId),0,rc)
					if rc==0 then : WAITEVENT : endif
				next
				if NotifySw==1 then
					for temp=0 to desc_cnt-1
						temp$=mid$(desc_table$(temp),4,4)
						rc=strvaldec(temp$)
						if (rc==2902) then
							rc=find_handler(desc_table$(temp))
							if (debsw==1) then : print "handler:";rc;" set to 1\n" : endif
							temp$ = "\01\00"
							rc = BLEGATTCWRITE(conn_table(CurrConnId),rc,temp$)
							if rc==0 then : WAITEVENT : endif
						endif
					next
					print Sep;integer.d'ScanSvcChrDesc;Sep;"All notify CCCD enabled\n"
				endif
				print Sep;integer.d'ScanSvcChrDesc;Sep;"Services/characteristics/descriptors count:";svc_cnt;"/";char_cnt;"/";desc_cnt;"\n"
				for temp=0 to svc_cnt-1
					print svc_table$(temp);"\n"
				next
				for temp=0 to char_cnt-1
					print chr_table$(temp);
					temp$="rd"
					rc=StrPos(chr_table$(temp),temp$,7)
					if rc>0 then 
						rc=find_handler(chr_table$(temp))
						rc = BleGattcRead(conn_table(CurrConnId),rc,0)
						if rc==0 then : WAITEVENT
						else : print " VAL:";"cant read from hndl(";integer.h'rc;")"
						endif
					endif
					print "\n"
				next
				for temp=0 to desc_cnt-1
					print desc_table$(temp)
					rc=find_handler(desc_table$(temp))
					rc = BleGattcRead(conn_table(CurrConnId),rc,0)
					if rc==0 then : WAITEVENT : endif
					print "\n"
				next
				print Sep;integer.d'ScanSvcChrDesc;Sep;"All services/characteristics/descriptors finded\n"
			endif
			break
		//-------------------------------------------------------------------------------
		case ReadAtt
			CurrConnId=str_to_id(urx$,1)
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(ReadAtt,CurrConnId)
			if rc>-1 then
				rc=str_to_id(urx$,1)
				if rc>-1 then
					print Sep;integer.d'ReadAtt;Sep;"Read data:\n"
					rc = BleGattcRead(conn_table(CurrConnId),rc,0)
					if rc==0 then : WAITEVENT : endif
					print Sep;integer.d'ReadAtt;Sep;"Attr read\n"
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case SetupSendSvc
			CurrConnId=str_to_id(urx$,1)
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(SetupSendSvc,CurrConnId)
			if rc>-1 then
				rtn_handlers_table$(CurrConnId)=urx$
				rc=str_to_id(urx$,1)
				if rc>-1 then
					RxHandle=rc
					rc=str_to_id(urx$,1)
					if rc>-1 then
						TXHandle=rc
						print Sep;integer.d'SetupSendSvc;Sep;"RX svc set:";RxHandle
						print ", TX svc set:";TXHandle;"\n"
					endif
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case SendToDev
			CurrConnId=str_to_id(urx$,1)
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(SendToDev,CurrConnId)
			if rc>-1 then
				if AscOrHexSw==0 then : data_table$[CurrConnId]=strdehexize$(urx$)
				else : data_table$[CurrConnId]=urx$
				endif
				if (CurrConnId==PrevConnId) then
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				else
					if strlen(rtn_handlers_table$(CurrConnId))>1 then
						temp$=rtn_handlers_table$(CurrConnId)
						RxHandle=str_to_id(temp$,1)
						TXHandle=str_to_id(temp$,1)
					endif
					if (debsw==1) then : print "Handlers:";RxHandle;"/";TXHandle;"\n" : endif
					if (strlen(data_table$[PrevConnId])!=0) then
						if (debsw==1) then : print Sep;"Old conn send\n" : endif
						do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
						until rc==0
					else 
						if (debsw==1) then : print Sep;"New conn send\n" : endif
						do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
						until rc==0		 
					endif
					PrevConnId=CurrConnId
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case SendTestData
			CurrConnId=str_to_id(urx$,1)
			if CurrConnId==-1 then : break : endif
			SendTestFlag=1
			rc=CheckConnId(SendTestData,CurrConnId)
			if rc>-1 then
				kbytes=str_to_id(urx$,1)
				if (kbytes>-1) then
					data_table$[CurrConnId]=TestStr
					do : rc=SendToBle(conn_table(CurrConnId),data_table$[CurrConnId])
					until rc==0
					PrevConnId=CurrConnId
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case DisConn
			CurrConnId=str_to_id(urx$,1)
			if CurrConnId==-1 then : break : endif
			rc=CheckConnId(DisConn,CurrConnId)
			if rc>-1 then
				rc = BleDisconnect(conn_table(CurrConnId))
				if rc==0 then : print Sep;integer.d'DisConn;Sep;"Close conncection: ";conn_table(CurrConnId);"\n"
				else : print Sep;integer.d'DisConn;Sep;"Unable to close conncection, error: ";integer.h'rc;"\n"
				endif
			endif
			break
		//-------------------------------------------------------------------------------
		case ModemParams
			rc=str_to_id(urx$,1)
			if rc==-1 then : break : endif
			if rc==1 then
				temp=str_to_id(urx$,1)
				if temp==-1 then : break : endif
				print " 1)PHY protocol:"
				select temp
					case 1
						BLE_PHY=BLE_1M_PHY
						SCAN_TYPE=BLE_NORMAL_SCANNING
						HIGH_BANDWIDTH=0
						print "BL4 1M mode\n" : break
					case 2
						BLE_PHY=BLE_2M_PHY
						print "BL5 2M mode\n" : break
					case 4
						BLE_PHY=BLE_CODED_PHY
						SCAN_TYPE=BLE_EXTENDED_SCANNING
						HIGH_BANDWIDTH=1
						print "BL5 CODED mode\n" : break
					case else
						print "available states BL4 1M(1),BL5 2M(2),BL5 CODED(4)\n"
				endselect
				temp = BleScanStop() 
				temp = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HIGH_BANDWIDTH)
				temp = BleScanConfig(4,BLE_PHY)
				temp = BleScanConfig(5,SCAN_TYPE)
				// Set connection PHYs to CODED PHY, enable extended connection
				temp = BleConnectConfig(10,BLE_PHY)
				temp = BleConnectConfig(11,SCAN_TYPE)
				//temp = BlePhySet(ConnectionID, BLE_PHY, BLE_PHY, 0)
			else
				print " 1)PHY protocol:"
				select BLE_PHY
					case BLE_1M_PHY
						print "BL4 1M\n" : break
					case BLE_2M_PHY
						print "BL5 2\n" : break
					case BLE_CODED_PHY
						print "BL5 CODED\n" : break
					case else
				endselect
			endif
			if rc==2 then
				temp=str_to_id(urx$,1)
				if temp==-1 then : break : endif
				print " 2)Tx power:"
				select temp
					case -8
						break
					case -4
						break
					case 0
						break
					case 2
						break
					case 4
						break
					case 6
						break
					case 8
						break
					case else
						temp=-10
				endselect
				if temp==-10 then : print "available states transmit power -8/-4/0/2/4/6/8\n"
				else : temp = BleTxPowerSet(temp) : print SysInfo(2008);"dBm\n"
				endif
			else
				print " 2)Tx power:"; SysInfo(2008);"dBm\n"
			endif
			if rc==3 then
				temp=str_to_id(urx$,1)
				if temp==-1 then : break : endif
				print " 3)Data send as:"
				select temp
					case 0
						print "HEX\n"
						AscOrHexSw=temp : break
					case 1
						print "ASCII\n"
						AscOrHexSw=temp : break
					case else
						print "available states ASCII(0)/HEX(1)\n"
				endselect
			else
				print " 3)Data send as:"
				if AscOrHexSw==0 then : print "HEX\n" : else : print "ASCII\n" : endif
			endif
			if rc==4 then
				temp=str_to_id(urx$,1)
				if temp==-1 then : break : endif
				print " 4)CCCD flag setup at scan:"
				select temp
					case 0
						print "OFF\n"
						NotifySw=temp : break
					case 1
						print "ON\n"
						NotifySw=temp : break
					case else
						print "available states disable(0)/enable(1)\n"
				endselect
			else
				print " 4)CCCD flag setup at scan:"
				if NotifySw==0 then : print "OFF\n" : else : print "ON\n" : endif
			endif
			if rc==5 then
				temp=str_to_id(urx$,1)
				if temp==-1 then : break : endif
				print " 5)Debug:"
				select temp
					case 0
						debsw=temp : print "OFF\n" : break
					case 1 
						debsw=temp : print "ON\n" : break
					case 2
						debsw=temp : print "msg timer on\n" : break
					case else
						print "available states OFF(0)/ON(1)/msg timer(2)\n"
				endselect
			else
				print " 5)Debug:"
				select debsw
					case 0
						print "OFF\n" : break
					case 1 
						print "ON\n" : break
					case 2
						print "msg timer on\n" : break
					case else
						print "available states OFF(0)/ON(1)/msg timer(2)\n"
				endselect
			endif
			dim fw,w,x,y,z
			fw=SysInfo(3) : w=fw>>24 : fw=fw-(w<<24)
			x=fw>>18 : fw=fw-(x<<18)
			y=fw>>6 : fw=fw-(y<<6)
			z=fw
			print " FW version:";w;".";x;".";y;".";z;"\n"
			print " Free flash DATA:"; SysInfo(602); "/"; SysInfo(601)
			print " FAT:"; SysInfo(612); "/"; SysInfo(611)
			print " NV:"; SysInfo(632); "/"; SysInfo(631);"\n"
			print " Stack size used:"; SysInfo(2021); "/"; SysInfo(2022);"\n"
			print " Heap size used:"; SysInfo(2025); "/"; SysInfo(2023);"\n"
			print " Timer resolution:"; SysInfo(2002);"uS, SysTick:"; SysInfo(2004);"uS\n"
			print " Radio activity:"
			select SysInfo(2016)
				case 0
					print "None\n" : break
				case 1
					print "Advertising\n" : break
				case 2
					print "Connected as slave\n" : break
				case 4
					print "Initaiting a connection\n" : break
				case 8
					print "Scanning for adverts\n" : break
				case 16
					print "Connected as master\n" : break
				case 24
					print "Scan while connected as master\n" : break
				case else
					print SysInfo(2016);"\n"
			endselect
			dim t as float
			t=SysInfo(2024)
			t=t/10.0
			print " Temperature:";t;"C\n"
			dim v as float
			v=SysInfo(2026)
			v=v/1000.0
			print " Supply voltage:";v;"V\n"
			print " FW StartTime:"; SysInfo(2080);"ms\n"
			// dim pcon,centcon
			// rc=NvCfgKeyGet(205,pcon)
			// print " AvailNumPeriphConn=";pcon;"\n"
			// rc=NvCfgKeyGet(206,centcon)
			// print " AvailNumCentrConn=";centcon;"\n"
			print " Number of active connections: ";conn_cnt;"\n"
			for temp=0 to device_addr_overall-1
				if conn_table[temp]>0 then
					print " ";temp;Sep; strhexize$(addr_table$[temp]);Sep;advpars_table$[temp];"\n"
				endif
			next
			break
		//-------------------------------------------------------------------------------
		case StopApp
			STOP
			break
		//-------------------------------------------------------------------------------
		case ResetMdm
			Reset(0)
			break
		//-------------------------------------------------------------------------------
		case else
			PRINT Sep;"Unknw cmnd. HEXECHO=";strhexize$(urx$);"\n"
	endselect
endsub	
