#include "modem.setup.sblib"
#include "modem.command.sblib"

// Handler for recieve and store advert messages
//-------------------------------------------------------------------------------
sub AdvertRecieve (ad$,dta$,rsi,advtype,advchan,ndisc,mdata$,phy)
	dim additions$
	additions$="044000000000"
	additions$=strdehexize$(additions$)
	rc=strsetchr(additions$,ABS(rsi),2)
	rc=strsetchr(additions$,phy,3)
	rc=strsetchr(additions$,advchan,4)
	rc=strsetchr(additions$,ndisc,5)
	for temp=0 to device_addr_overall-1
		rc=StrCmp(ad$,addr_table$[temp])
		if (rc==0) then			//if found increase msg count
			if (msg_cnt[temp]==1) then : adv_table$[temp]=dta$+additions$ : endif
			msg_cnt[temp]=msg_cnt[temp]+1
			break
		endif
	next
	if (rc!=0) then				//add new address in table
		if conn_table[dev_cnt]==0 then
			addr_table$[dev_cnt]=ad$
			adv_table$[dev_cnt]=dta$+additions$
			msg_cnt[dev_cnt]=msg_cnt[dev_cnt]+1
			dev_cnt=dev_cnt+1
		else 
			dev_cnt=dev_cnt+1
			addr_table$[dev_cnt]=ad$
			adv_table$[dev_cnt]=dta$+additions$
			msg_cnt[dev_cnt]=msg_cnt[dev_cnt]+1
			dev_cnt=dev_cnt+1
		endif
	endif
	if dev_cnt==device_addr_overall then		
		print Sep;integer.d'StopScanDev;Sep;"Scanning stopped via max number of device foud\n"
		CommandParser(2)
	endif
endsub

// Handler for reading advert report
//==============================================================================
function HandlerAdvRpt() as integer
	dim ndisc,rsi,phy,ad$,dta$,advtype,advchan,mdata$
	rc = BleScanGetAdvReportEx(advtype,ad$,dta$,ndisc,rsi,advchan)
	while (rc==0)
		phy=BLE_1M_PHY
		AdvertRecieve (ad$,dta$,rsi,advtype,advchan,ndisc,mdata$,phy)	
		rc = BleScanGetAdvReportEx(advtype,ad$,dta$,ndisc,rsi,advchan)		
	endwhile
endfunc 1

// Handler for reading extension advert report
//==============================================================================
function HandlerExtAdvRpt(BYVAL ad$ AS STRING,BYVAL dta$ AS STRING,BYVAL rsi AS INTEGER,BYVAL mdata$ AS STRING)
	AdvertRecieve (ad$,dta$,rsi,0,0,0,mdata$,BLE_CODED_PHY)
	//print "ad=";ad$;"dta=";dta$;"rssi=";rsi
	//rc=BleExtRptMetadata(mdata$,3)
	//print "mdata=";mdata$;"\n"
endfunc 1

// EVNOTifYBUF - Buffer fro BleGattcWriteCmd has been emptied
//==============================================================================
function HndlrNtfyBuf()
    if BufferState == 1 then
		TimerCancel(0)
        BufferState = 0
        do : rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
		until rc==0
    // ELSE
        // rc=SendToBle(conn_table(PrevConnId),data_table$[PrevConnId])
    endif
	if (debsw==1) then : print Sep;"Client: data rcv &  buf empty\n" : endif
	if SendTestFlag==1 then
		if (strlen(data_table$[PrevConnId])==0) then
			ParalHandlWork=2
			TimerStart(0,60,1)
		endif
	endif
endfunc 1

// This handler is called when data recieved through UART
//==============================================================================
function HndlrUartRx() 
	rc = UartReadMatch(urx$, 0x0D) //Read data from UART
	if (rc>0) then
		urx$=left$(urx$,rc-1)	//remove 0x0D from buf
		rc=str_to_id(urx$,1)	//get command number
		CommandParser(rc)
		urx$=""
	endif
endfunc 1

// EVATTRNOTifYEX - Received BLE notification
//==============================================================================
function HndlrAttrNotifyEx(BYVAL hConn AS INTEGER, BYVAL hAttr AS INTEGER,BYVAL nType AS INTEGER, BYVAL nLength AS INTEGER,BYVAL data$ AS STRING)
    if (hAttr == TXHandle) then	
        for temp=0 to device_addr_overall-1
			if (hConn==conn_table[temp]) then
				if AscOrHexSw==0 then : data$=strhexize$(data$) : endif
				print Sep;integer.d'SendToDev;Sep;temp;Sep;nLength;Sep;data$;"\n" // Just print data that we got 
				if (debsw==2) then
					print "time=";GetTickCount()-LastTick;"\n"
					LastTick=GetTickCount()
				endif
				break
			endif
		next
    endif
    data$ = ""
endfunc 1
		
// This function is used to configure the BL654 to use high bandwidth
//-------------------------------------------------------------------------------
sub BleHighBandwidth()
	rc = NvCfgKeyGet(USE_STRINT_IN_EVENTS_KEY_ID, temp) // Get High bandwidth value
	if  (temp != USE_STRING_IN_EVENTS) then
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTifYEX instead of EVATTRNOTifY)
		rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
		Reset(0)
    endif
    rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, temp) // Get High bandwidth value
    if  (temp != HIGH_BANDWIDTH) then
        // Change the bandwidth configuration to HIGH (6 packets per interval)
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten  
		Reset(0)		
    endif
endsub

// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
	print Sep;integer.d'StopScanDev;Sep;"Scanning stopped via timeout\n"
	CommandParser(2)
endfunc 1

// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print Sep;"PHY Changed! Status: ";integer.h' nStatus;" PhyTx=";PhyTx;" PhyRx=";PhyRx;"\n" : endif
endfunc 1

// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print Sep;"PHY Request! PhyTx=";PhyTx;" PhyRx=";PhyRx;"\n" : endif
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

// EVBLE_CONN_TIMEOUT - BLE connection timed out
//==============================================================================
function HndlrConnTO()
    print Sep;integer.d'ConnToDev;Sep;"Connection attempt timed out.\n"
endfunc 1

// EVATTRWRITE - Remote characteristic written
//==============================================================================
function HndlrAttrWrite(cHndl,aHndl,nSts)
	BufferState = 0
	urx$ = ""
	BleBuf$ = ""
	// Now that everything is setup, Requst a switch to CODED PHY
	//rc = BlePhySet(cHndl, BLE_PHY, BLE_PHY, 0)
	rc = HndlrUartRx()
	if (debsw==1) then
		if nSts==0 then : print "Attr (";aHndl;") write OK\n"
		else : print "Failed to write attr (";aHndl;")\n"
		endif
	endif
endfunc 0

// EVATTRREAD - Remote characteristic read
//==============================================================================
function HndlrAttrRead(cHndl,aHndl,nSts) as integer
	dim Ofs,dat$
	if nSts==0 then
		if (debsw==1) then : print "Attr (";aHndl;") read OK\n" : endif
		rc=BleGattcReadData(cHndl,aHndl,Ofs,dat$)
		//print "H:";aHndl;" data:";dat$;"(";strhexize$(dat$);")\n"
		if rc==0 then : print " VAL:";dat$;"(";strhexize$(dat$);")"
		else : print " VAL:";"cant read data(";integer.h'rc;")"
		endif
	else
		else : if (debsw==1) then : print "Failed to read attr (";aHndl;")\n" : endif
	endif
endfunc 0

// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
sub ShowConnParms(nConnHandle)
    DIM intrvl,suprvisto,slavelat
    rc = BleGetCurConnParms(nConnHandle,intrvl,suprvisto,slavelat)
    if (debsw==1) then : print Sep;"ConnParms: Interval=";intrvl;",SuperTout=";suprvisto;",SlaveLatency=";slavelat;"\n" : endif
endsub

// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer	
	select nMsgId		
		case BLE_EVBLEMSGID_CONNECT
			ConnectionID = nCtx
			print Sep;integer.d'ConnToDev;Sep;"Connectinon ";ConnectionID;" for dev â„–";integer.d'ad_from_table;" created\n"	
			conn_table[ad_from_table]=ConnectionID
			conn_cnt=conn_cnt+1
			ShowConnParms(ConnectionID)	
			temp$ = "\01\00"
			rc = BLEGATTCWRITE(ConnectionID, TXCCCDHandle, temp$)
			if rc==0 then : WAITEVENT : endif
			rc = BleSetCurConnParms(ConnectionID,minConnInterval,10000,5000000,0)
		case BLE_EVBLEMSGID_DISCONNECT
			ConnectionID = nCtx
			for temp=0 to device_addr_overall-1
				if (ConnectionID==conn_table[temp]) then
					print Sep;integer.d'DisConn;Sep;temp;Sep;"Disconnected!\n"
					conn_table[temp]=0
					conn_cnt=conn_cnt-1
					break
				endif
			next
			//BleGattcClose()
		case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
			ShowConnParms(ConnectionID)
		case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
			if (debsw==1) then : print Sep;"Set ConnParms: FAIL\n" : endif
		case else
	endselect
endfunc 1

// Initialization
//******************************************************************************
sub Init()
	BleHighBandwidth()	// Enable high bandwidth
	if UartInfo(0)==0 then : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	else : UartClose() : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	endif
	rc = BleTxPowerSet(TRANSMIT_POWER) //set transmitter power
	// Set Scanning PHYs
	rc = BleScanConfig(0,scan_interval)
	rc = BleScanConfig(1,scan_window)
	rc = BleScanConfig(3,device_addr_overall)
	rc = BleScanConfig(4,BLE_PHY)
	rc = BleScanConfig(5,SCAN_TYPE)
	// Set connection PHYs
	rc = BleConnectConfig(10,BLE_PHY)
	rc = BleConnectConfig(11,SCAN_TYPE)
	rc = NvCfgKeySet(206,6)
	rc = NvCfgKeySet(207,2)
	rc = BleGattcOpen(GATT_BUF, 0)
	print Sep
	select BLE_PHY
		case 1
			print "BL4 1M"
		case 2
			print "BL5 2M"
		case 4
			print "BL5 CODED"
		case else
	endselect
	print " modem"
	temp$ = SYSINFO$(4)
	print " / Address "; strhexize$(temp$);" / Power "; SysInfo(2008);"db.\n"
	print Sep;"Write ";integer.d'Help;Sep;" for help or ";integer.d'ModemParams;Sep;integer.d'0;Sep;" for hardware parameters\n"
endsub
Init()

// Generic BLE events
OnEvent	EVBLE_SCAN_TIMEOUT  	call HandlerBlrScanTimOut
OnEvent	EVBLE_ADV_REPORT    	call HandlerAdvRpt
OnEvent	EVBLE_EXTADV_RPT    	call HandlerExtAdvRpt
OnEvent	EVBLEMSG            	call HandlerBleMsg
OnEvent EVATTRWRITE         	call HndlrAttrWrite
OnEvent EVATTRREAD         		call HndlrAttrRead
OnEvent EVBLE_CONN_TIMEOUT  	call HndlrConnTO
OnEvent EVATTRNOTIFYEX      	call HndlrAttrNotifyEx      // Used if AT+CFG 213=1
OnEvent EVNOTIFYBUF       		call HndlrNtfyBuf
OnEvent EVDISCPRIMSVC 			call HndlrPrimSvc
OnEvent EVDISCCHAR 				call HandlerCharDisc
OnEvent EVDISCDESC 				call HandlerDescDisc
// UART event
OnEvent	EVUARTRX 				call HndlrUartRx
// BLE PHY
OnEvent	EVBLE_PHY_UPDATED  		call HandlerPhyChngd
OnEvent	EVBLE_PHY_REQUEST  		call HandlerPhyReq
// Timers
OnEvent EVTMR0 					call ParallelHandler
// Wait for a synchronous event
WAITEVENT
Reset(0)
