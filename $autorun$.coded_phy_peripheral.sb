//******************************************************************************
// Definitions
//******************************************************************************
#define DeviceName                    	"SIAM MODEM"
#define BLE_TX_POWER                    8		// Possible values are 8, 7, 6, 5, 4, 3, 2, 0, -4, -8, -12, -16, -20, -40dBm
#define BLE_1M_PHY                      1
#define BLE_2M_PHY                      2
#define BLE_CODED_PHY                   4
#define ADV_CONN						0
#define ADV_DIRECT_CONN					1
#define ADV_EXT_CONN					6
#define ADV_EXT_DIRECT_CONN				7
#define ADV_TYPE						ADV_EXT_CONN
#define BLE_PHY							BLE_CODED_PHY
#define U_BUF							2048
#define U_SPEED							115200
#define MinConnInterval					7500
#define MaxConnInterval					20000
#define EncryptConn						2 //2-encr, 1-open
#define AddAppearanceToAdv				0 //0\1
#define BleAppearance					3200	//3200-весы, 520-тэг, 128-компьютер, 64-телефонб 384-удаленное кправление, ble_types.h in SDK
#define DevNameLength					10
#define AdvInterval						250
// Definitions for attribute values to achieve higher bandwidth needed for CODED PHY
#define USE_STRINT_IN_EVENTS_KEY_ID		213		// CFG ID 213
#define ENABLE_HIGH_BANDWIDTH_KEY_ID	214		// CFG ID 214
#define USE_STRING_IN_EVENTS			1		// 0: use EVATTRNOTIFY, 1: use EVATTRNOTIFYEX (See user manual)
#define BLE_ENABLE_HIGH_BANDWIDTH		1		// 0: Normal Bandwidth (default), 1: High Bandwidth					
#define BASEUUID						0x6340	//"\56\9a\11\01\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c" VSP base UUID
#define RXUUID							0x6341
#define TXUUID							0x6342
#define GAPDataType1					0x27	//bluetooth.com/specifications/assigned-numbers/generic-access-profile/
dim LESupFutr$:LESupFutr$=				"2018"	//(v6,pB,4.6 bt core specification)
#define GAPDataType2					0x24
dim http$:http$=						"16"
dim URI$:URI$=							"//siamoil.ru"
dim tag$:tag$=							"44"
dim Company$:Company$=					"ТНПВО СИАМ"
dim Addr$:Addr$=""
#set $cmpif,0xFF

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc                              	// Result code variable (used for checking if a function completed successfully or not)
dim BaseUUID                        	// Base UUID for the VSP service which other UUIDs will be siblings of
dim svcID                           	// VSP Service ID
dim TXchar                          	// TX characteristic
dim RXchar                          	// RX characteristic
dim ConnectionID:ConnectionID = 0		// Holds the connection ID of the VSP client (if one is connected)
dim UARTBlocked : UARTBlocked = 0   	// When set to 1 will not read data from the UART
dim BufferState : BufferState = 0		// Status flag show availible to transmit data
dim nAttributeMTU : nAttributeMTU = 23				//Default Maximum Transmission Unit on BL654
dim nAttributeLength : nAttributeLength = 20		//Default Attribute Data Length on BL654
dim nBleMaxPacketLength : nBleMaxPacketLength = 27	//Default maximum packet length on BL654
dim UartData$
dim DevName$ : DevName$ = DeviceName

//------------------------------------------------------------------------------
// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
sub AssertRC(rc, tag)
    if (rc != 0) then
        print "Assert Error ";integer.h'rc;" at tag ";tag;"\r\n"
    endif
endsub

//-------------------------------------------------------------------------------
// This function is to enable the High Bandwidth configuration in order to achieve the long range
//-------------------------------------------------------------------------------
FUNCTION EnableHighBandwidth()
	dim HighBandwidth,StringEvent
	rc = NvCfgKeyGet(USE_STRINT_IN_EVENTS_KEY_ID, StringEvent) // Get High bandwidth value
	IF  (StringEvent != USE_STRING_IN_EVENTS) THEN
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
		rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
		Reset(0)
    ENDIF
    rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HighBandwidth) // Get High bandwidth value
    IF  (HighBandwidth != BLE_ENABLE_HIGH_BANDWIDTH) THEN
        // Change the bandwidth configuration to HIGH (6 packets per interval)
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, BLE_ENABLE_HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten  
		Reset(0)		
    ENDIF
ENDFUNC 0

//------------------------------------------------------------------------------
// Function that will create a custom VSP service with Tx/Rx characteristics
//------------------------------------------------------------------------------
function ServiceAndAdvertInit()
    dim UUIDStr$,mdCccd,mdVal,s$,RxUUID,TxUUID,svcID,mdrxDesc,rxDesc$,mdtxDesc,txDesc$
    s$ = "\00" //Default value for characteristics  
    //Create the VSP service
	BaseUUID = BleHandleUuid16(BASEUUID)
	// UUIDStr$=BASEUUID
	// BaseUUID = BleHandleUuid128(UUIDStr$)
    rc = BleServiceNew(1, BaseUUID, svcID)
    //Create the RX characteristic
    mdVal = BleAttrMetadata(0,1,nAttributeLength,1,rc)
    RxUUID = RXUUID
    RxUUID = BleHandleUuidSibling(BaseUUID, RxUUID)
    rc = BleCharNew(8, RxUUID, mdVal, 0, 0)
	mdrxDesc=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	rxDesc$="RX data"
	rc=BleCharDescUserDesc(rxDesc$,mdrxDesc)
    rc = BleCharCommit(svcID, s$, RXchar)
    //Create the TX characteristic
    mdVal = BleAttrMetadata(0,0,nAttributeLength,1,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc) 
    TxUUID = TXUUID
    TxUUID = BleHandleUuidSibling(BaseUUID, TxUUID)
    rc = BleCharNew(16, TxUUID, mdVal, mdCccd, 0)
	mdtxDesc=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	txDesc$="TX data"
	rc=BleCharDescUserDesc(txDesc$,mdtxDesc)
    rc = BleCharCommit(svcID, s$, TXchar)
    rc = BleServiceCommit(svcID)
	
	//Create advertising messages/sets
	dim scRpt$,adRpt$,ad1Rpt$,t1ext$,t2ext$,t3ext$
	rc=BleGapSvcInit(DevName$,0,BleAppearance,MinConnInterval,MaxConnInterval,4000000,0) : AssertRC(rc,1)
	rc=BleAdvRptInit(adRpt$, 6, AddAppearanceToAdv, DevNameLength) : AssertRC(rc,2)
	rc=BleScanRptInit(scRpt$)
	
	//t1ext$=strdehexize$(LESupFutr$)
	//rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType1,t1ext$) : AssertRC(rc,3)
	t3ext$=strdehexize$(tag$)+Company$
	rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,t3ext$) : AssertRC(rc,5)
	t2ext$=strdehexize$(http$)+URI$
	rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,t2ext$) : AssertRC(rc,4)
	
	//rc=BleAdvRptsCommit(adRpt$,scRpt$) : AssertRC(rc,6)
	rc=BleAdvSetCreate(0,9,1,0,Addr$,"") : AssertRC(rc,7)
	rc=BleAdvSetNewData(0,adRpt$,scRpt$) : AssertRC(rc,8)
endfunc 0

//------------------------------------------------------------------------------
// Start LE Adverts
//------------------------------------------------------------------------------
FUNCTION BleStartAdverts()
	if BLE_PHY==BLE_CODED_PHY then
		rc=BleAdvSetStart(0,AdvInterval,0,0,0) : AssertRC(rc,9)
	else
		rc=BleAdvertStart(ADV_TYPE, Addr$, AdvInterval, 0, 0) : AssertRC(rc,10)
	endif
ENDFUNC 0

// dim sel
// function ChangeAdvSet()
	// if sel==0 then : rc=BleAdvRptsCommit(adRpt$,scRpt$) : sel=1
	// else : rc=BleAdvRptsCommit(ad1Rpt$,scRpt$) : sel=0
	// endif
// endfunc 1

//------------------------------------------------------------------------------
// EVUARTRX - Function handler for UART data receive
//------------------------------------------------------------------------------
FUNCTION HndlrUartRx()
    dim RdLen, DataToSend$
	RdLen = UARTREADN(UartData$,2048)
	if ConnectionID!=0 then
		IF RdLen > 0 THEN
			IF BufferState == 0 THEN		
				#cmpif 0xFF : print "\nubuf\n"//=";strhexize$(UartData$);"\n"
				DataToSend$ = Left$(UartData$, nAttributeLength)
				rc = BLECHARVALUENOTIFY(TXchar, DataToSend$)
				select rc
					case 0
						rc=strlen(DataToSend$)
						StrShiftLeft(UartData$,rc)
						#cmpif 0xFF : print "-Succs send to char:";TXchar;"\n"
					case else
						BufferState = 1
						#cmpif 0xFF : print "-Ble send error! rc=";integer.h'rc;" msg-";DataToSend$;"\n"
				endselect
			endif
		ENDIF
	else 
		print "rcv-";UartData$;"\n"
		UartData$=""
	endif
ENDFUNC 1

//------------------------------------------------------------------------------
// EVNOTIFYBUF - Notification buffer was emptied
//------------------------------------------------------------------------------
FUNCTION HndlrNtfyBuf()
    IF BufferState == 1 THEN
        BufferState = 0
        rc=HndlrUartRx()
    ELSE
        rc=HndlrUartRx()
    ENDIF
	#cmpif 0xFF : print "Client: data rcv &  buf empty\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// EVCHARVALUE - Handler for characteristic value written
//------------------------------------------------------------------------------
FUNCTION HndlrCharValue(nConnHandle, charHandle, offset, len, BYVAL Rd$ AS STRING)
    // Just print the data that we got from the char
	print "charvalue-";charHandle;"\n"
    IF charHandle == RXchar THEN
		PRINT Rd$
		#cmpif 0xFF : UartData$=Rd$
		#cmpif 0xFF : rc=HndlrUartRx()		
    ENDIF
ENDFUNC 1

//==============================================================================
// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    print "-PHY Changed-Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
endfunc 1

//==============================================================================
// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    print "-PHY Request-PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

//------------------------------------------------------------------------------
// This shows the current connection parameters
//------------------------------------------------------------------------------
SUB ShowConnParms()
    DIM intrvl,sprvto,slat
    rc = BleGetCurConnParms(ConnectionID,intrvl,sprvto,slat)
    #cmpif 0xFF : print "-ConnParms-Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
ENDSUB

//------------------------------------------------------------------------------
// Function to handle Ble event messages
//------------------------------------------------------------------------------
#define BLE_EVBLEMSGID_CONNECT                  0   //nCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT               1   //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE        14  //nCtx = connection handle
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)
    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        PRINT "-Connected\n"
        ConnectionID = nCtx
        ShowConnParms()
    case BLE_EVBLEMSGID_DISCONNECT
        PRINT "-Disconnected!\n"
        rc = BleStartAdverts()
		ConnectionID = 0
    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms()
    case else
    endselect
endfunc 1

//******************************************************************************
// main()
//******************************************************************************
if UartInfo(0)==0 then : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
else : UartClose() : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
endif
rc = BleTxPowerSet(BLE_TX_POWER)
rc = EnableHighBandwidth()
rc = ServiceAndAdvertInit()
rc = BleAdvertConfig(4,BLE_PHY)
rc = BleAdvertConfig(5,BLE_PHY)
rc = BleStartAdverts()
dim RealAddr$:RealAddr$ = SYSINFO$(4)
print "Hi! My address is "; strhexize$(RealAddr$);"\n"
//TimerStart(0,1000,1)

//******************************************************************************
//Setup event handlers
//******************************************************************************
// UART events
ONEVENT EVUARTRX			CALL HndlrUartRx
// Generic BLE events
ONEVENT EVBLEMSG			CALL HndlrBleMsg
ONEVENT EVCHARVALUE			CALL HndlrCharValue         // Used if AT+CFG 213=1
ONEVENT EVNOTIFYBUF			CALL HndlrNtfyBuf
// BLE PHY
ONEVENT EVBLE_PHY_UPDATED	CALL HandlerPhyChngd
ONEVENT EVBLE_PHY_REQUEST	CALL HandlerPhyReq
// Timer for change advsets
//OnEvent EVTMR0 				call ChangeAdvSet

WAITEVENT
