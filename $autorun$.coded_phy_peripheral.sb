#include "peripheral.setup.sblib"

// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
sub AssertRC(rc, tag)
    if (rc != 0) then : print "Error ";integer.h'rc;" at tag ";tag;"\r\n"
    endif
endsub

// Enable the High Bandwidth configuration in order to achieve the long range
//==============================================================================
function EnableHighBandwidth()
	rc = NvCfgKeyGet(USE_STRINT_IN_EVENTS_KEY_ID, temp) // Get High bandwidth value
	if  (temp != USE_STRING_IN_EVENTS) then
		// Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
		rc = NvCfgKeySet(USE_STRINT_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
		Reset(0)
    endif
    rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, temp) // Get High bandwidth value
    if  (temp != BLE_ENABLE_HIGH_BANDWIDTH) then
        // Change the bandwidth configuration to HIGH (6 packets per interval)
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, BLE_ENABLE_HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten  
		Reset(0)		
    endif
endfunc 0

// Function that will create a custom VSP service with Tx/Rx characteristics
//==============================================================================
Sub ServiceInit()
    dim mdCccd,mdVal,s$,svcID//,UUIDStr$
    s$ = "\00" //Default value for characteristics  
    //Create the VSP service
	BaseUUID = BleHandleUuid16(BASEUUID)
	// UUIDStr$=BASEUUID
	// BaseUUID = BleHandleUuid128(UUIDStr$)
    rc = BleServiceNew(1, BaseUUID, svcID)
    //Create the RX characteristic
    mdVal = BleAttrMetadata(0,1,nAttributeLength,1,rc)
    temp = RXUUID
    temp = BleHandleUuidSibling(BaseUUID, temp)
    rc = BleCharNew(8, temp, mdVal, 0, 0)
	temp=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	temp$="RX data"
	rc=BleCharDescUserDesc(temp$,temp)
    rc = BleCharCommit(svcID, s$, RXchar)
    //Create the TX characteristic
    mdVal = BleAttrMetadata(0,0,nAttributeLength,1,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc)
    temp = TXUUID
    temp = BleHandleUuidSibling(BaseUUID, temp)
    rc = BleCharNew(16, temp, mdVal, mdCccd, 0)
	temp=BleAttrMetadata(1,0,nAttributeLength,1,rc)
	temp$="TX data"
	rc=BleCharDescUserDesc(temp$,temp)
    rc = BleCharCommit(svcID, s$, TXchar)
    rc = BleServiceCommit(svcID)
endsub

// Function that will create advertising messages/sets
//==============================================================================
sub AdvertInit(flag)
	dim scRpt$,adRpt$//,ad1Rpt$
	rc=BleGapSvcInit(DevName$,0,BleAppearance,MinConnInterval,MaxConnInterval,4000000,0) : AssertRC(rc,1)
	rc=BleAdvRptInit(adRpt$, 6, AddAppearanceToAdv, DevNameLength) : AssertRC(rc,2)
	rc=BleScanRptInit(scRpt$)
	
	if BLE_PHY==BLE_CODED_PHY then
		//temp$=strdehexize$(LESupFutr$)
		//rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType1,temp$) : AssertRC(rc,3)
		temp$=strdehexize$(tag$)+Company$
		rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,temp$) : AssertRC(rc,4)
		temp$=strdehexize$(http$)+URI$
		rc=BleExtAdvRptAppendAD(adRpt$,GAPDataType2,temp$) : AssertRC(rc,5)
		select flag
			case 1 //create
				rc=BleAdvSetCreate(0,9,1,0,Addr$,"") : AssertRC(rc,6)
				rc=BleAdvSetNewData(0,adRpt$,scRpt$) : AssertRC(rc,7)
			case 2 //update
				rc=BleAdvSetNewData(0,adRpt$,scRpt$) : AssertRC(rc,8)
			case else
		endselect
	else : rc=BleAdvRptsCommit(adRpt$,scRpt$) : AssertRC(rc,9)
	endif
	//print "space-"; BleAdvRptGetSpace(adRpt$)
	//print "space-"; BleExtAdvRptGetSpace(adRpt$)	
endsub

// Start LE Adverts
//==============================================================================
function BleStartAdverts()
	if BLE_PHY==BLE_CODED_PHY then : rc=BleAdvSetStart(0,AdvInterval,0,0,0)
	else : rc=BleAdvertStart(ADV_TYPE, Addr$, AdvInterval, 0, 0)
	endif
endfunc rc

// Stop LE Adverts
//==============================================================================
function BleStopAdverts()
	if BLE_PHY==BLE_CODED_PHY then : rc=BleAdvSetStop(0)
	else : rc=BleAdvertStop()
	endif
endfunc rc

// Transmit mode parser
//==============================================================================
function ModeCheck(cnt)
	//print "check:";UartData$;cnt;"\n"
	if (cnt<11) then //+2 symbols for cr/lf
		if (cnt<7) then
			if (StrPos(UartData$,DataModeStr$,0)!=-1) then 
				if ConnectionID!=0 then
					Mode=DataMode
					UartData$=""
					print "\r\nDATAMODE_SUCCS\r\n"
					exitfunc 1
				else 
					if (debsw==1) then : print "\r\nNO_CONN\r\n" : endif
					exitfunc 1
				endif
			endif
		else
			if (StrPos(UartData$,CmndModeStr$,0)!=-1) then 
				Mode=CmndMode
				UartData$=""
				print "\r\nCMNDMODE_SUCCS\r\n"
				exitfunc 1
			endif
		endif
	endif
endfunc 0

// Commands parser
//==============================================================================
sub CmndParsing()
	rc=ExtractStrToken(UartData$,temp$)
	for temp=0 to NumCmnds-1
		if (StrCmp(temp$,CmndsTable$[temp])==0) then : CmdNum=temp : break
		else : CmdNum=-1
		endif
	next
	select CmdNum
		case ready
			print "\r\nSUCCS\r\n"
		case nameset
			rc=ExtractStrToken(UartData$,temp$)
			DevName$=temp$
			rc=BleStopAdverts()
			AdvertInit(2)
			rc=BleStartAdverts()
			if rc==0 then : print "\r\nNAME_SUCCS\r\n" : endif
			break
		case uartset
			rc=ExtractStrToken(UartData$,temp$)
			temp=strvaldec(temp$)
			print "uartspeed=";temp;"\n"
			UartFlush(1)
			UartFlush(2)
			UartClose()
			rc = UartOpen(temp,U_BUF,U_BUF,"CN81H")
			if rc==0 then : print "\r\nU_SUCCS\r\n" : endif
			break
		case physet
			rc=ExtractIntToken(UartData$,temp)
			dim HIGH_BANDWIDTH
			select temp
				case 1
					BLE_PHY=BLE_1M_PHY
					HIGH_BANDWIDTH=0
				case 4
					BLE_PHY=BLE_CODED_PHY
					HIGH_BANDWIDTH=1
				case else
					print "\r\nUNKNW_PARAM\r\n"
			endselect
			temp = BleStopAdverts()
			temp = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, HIGH_BANDWIDTH)
			temp = BleAdvertConfig(4,BLE_PHY)
			temp = BleAdvertConfig(5,BLE_PHY)
			AdvertInit(1)
			//temp = BleConnectConfig(11,BLE_PHY)
			rc=BleStartAdverts()
			//temp = BlePhySet(ConnectionID, BLE_PHY, BLE_PHY, 0)
			if temp==0 then : print "\r\nPHY_SUCCS\r\n" : endif
			break
		case power
			rc=ExtractIntToken(UartData$,BLE_TX_POWER)
			rc = BleTxPowerSet(BLE_TX_POWER)
			if rc==0 then : print "\r\nPWR_SUCCS\r\n" : endif
			break
		case drop
			rc = BleDisconnect(ConnectionID)
			if rc==0 then : print "\r\nDISC_SUCCS\r\n" : endif
			break
		case debug
			debsw=!debsw
			print "\r\nDEB_SW";debsw;"\r\n"
		case resetfw
			reset(0)
		case else
			print "\r\nUNKNW_CMND\r\n"
	endselect
endsub

// EVUARTRX - Function handler for UART data receive
//==============================================================================
function HndlrUartRx()
	TimerStart(1,5,0)
endfunc 1

// Buffered uart handler
//==============================================================================
function HndlrBufferedUart()
    select Mode
		case DataMode
			rc = UARTREADN(UartData$,U_BUF)
			if ConnectionID!=0 then
				if rc > 0 then
					if (ModeCheck(rc)==0) then
						if BufferState == 0 then
							if (debsw==1) then : print "datamode:";UartData$;"\n" : endif
							temp$ = Left$(UartData$, nAttributeLength)
							rc = BLECHARVALUENOTIFY(TXchar, temp$)
							select rc
								case 0
									rc=strlen(temp$)
									StrShiftLeft(UartData$,rc)
									if (debsw==1) then : print "Succs send to char:";TXchar;"\n" : endif
								case else
									BufferState = 1
									if (debsw==1) then : print "Ble send error! rc=";integer.h'rc;" msg-";temp$;"\n" : endif
							endselect
						endif
					else : UartData$=""
					endif
					//UartData$=""
				endif
			endif
			break
		case CmndMode
			rc = UartReadMatch(UartData$, 0x0D)
			if rc > 0 then
				if (ModeCheck(rc)==0) then
					CmndParsing()
					if (debsw==1) then : print "cmndmode:";UartData$;"\n" : endif
				else : UartData$="" //очистка если была команда
				endif
				UartData$=""
			endif
			break
		case else
	endselect
endfunc 1

// EVNOTIFYBUF - Notification buffer was emptied
//==============================================================================
function HndlrNtfyBuf()
    if BufferState == 1 then
        BufferState = 0
        rc=HndlrBufferedUart()
    else
        rc=HndlrBufferedUart()
    endif
	if (debsw==1) then : print "Client: data rcv &  buf empty\n" : endif
endfunc 1

// EVCHARVALUE - Handler for characteristic value written
//==============================================================================
function HndlrCharValue(nConnHandle, charHandle, offset, len, BYVAL Rd$ AS STRING)
    // Just print the data that we got from the char
	//print " CharHandle-";charHandle;"\n"
    if charHandle == RXchar then
		print Rd$
		//UartData$=Rd$
		//rc=HndlrUartRx()
    endif
endfunc 1

// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print "PHY Changed-Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n" : endif
endfunc 1

// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    if (debsw==1) then : print "PHY Request-PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n" : endif
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

// This shows the current connection parameters
//------------------------------------------------------------------------------
sub ShowConnParms()
    dim intrvl,sprvto,slat
    rc = BleGetCurConnParms(ConnectionID,intrvl,sprvto,slat)
    if (debsw==1) then : print "ConnParms-Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n" : endif
endsub

// Handler for cccd value written
//==============================================================================
function HndlrCharCccd(charHandle, nVal)
    if charHandle == TXchar then
		if (debsw==1) then : print "BleNotify CCCD:";nVal;"\n" : endif
        if (nVal&0x0001) == 0x0001 then   //if notify enabled
            TimerCancel(0)     
        else
            TimerStart(0,5000,0)
        endif
    endif
endfunc 1

// Handler for cccd enable timer
//==============================================================================
function HndlrBleCccdTout()  //cccd was not enabled in time
    rc = BleDisconnect(ConnectionID)
    if (debsw==1) then : print "BLE Disconnect due to cccd not enabled\n" : endif
endfunc 1

// Function to handle Ble event messages
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)
    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        print "Connected\n"
        ConnectionID = nCtx
        ShowConnParms()
		Mode=DataMode
		TimerStart(0,5000,0)
    case BLE_EVBLEMSGID_DISCONNECT
        if (debsw==1) then : print "Disconnected\n" : endif
        rc = BleStartAdverts()
		ConnectionID = 0
		Mode=CmndMode
    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms()
    case else
    endselect
endfunc 1

// Initialization
//******************************************************************************
sub Init()
	if UartInfo(0)==0 then : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	else : UartClose() : rc = UartOpen(U_SPEED,U_BUF,U_BUF,"CN81H")
	endif
	rc = BleTxPowerSet(BLE_TX_POWER)
	rc = EnableHighBandwidth()
	ServiceInit()
	AdvertInit(1)
	rc = BleAdvertConfig(4,BLE_PHY) : AssertRC(rc,22)
	rc = BleAdvertConfig(5,BLE_PHY) : AssertRC(rc,23)
	rc = BleStartAdverts() : AssertRC(rc,24)
	temp$ = SYSINFO$(4)
	if (debsw==1) then : print "Device. My address is "; strhexize$(temp$);"\n" : endif
endsub
Init()

// UART events
OnEvent EVUARTRX			call HndlrUartRx
// Generic BLE events
OnEvent EVBLEMSG			call HndlrBleMsg
OnEvent EVCHARVALUE			call HndlrCharValue         // Used if AT+CFG 213=1
OnEvent EVNOTIFYBUF			call HndlrNtfyBuf
OnEvent EvCharCccd			call HndlrCharCccd
// BLE PHY
OnEvent EVBLE_PHY_UPDATED	call HandlerPhyChngd
OnEvent EVBLE_PHY_REQUEST	call HandlerPhyReq
// Timers
OnEvent EVTMR0 				call HndlrBleCccdTout
OnEvent EVTMR1 				call HndlrBufferedUart
// Wait for a synchronous event
WAITEVENT
Reset(0)
